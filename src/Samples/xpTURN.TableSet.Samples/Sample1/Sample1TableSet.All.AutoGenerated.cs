// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Samples.Sample1TableSet;

namespace Samples
{
    public partial class BoxData : Data, IMessage<BoxData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public int NameRefId;
        public string NameRefIdAlias = "";
        public List<BoxSlot> List = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public BoxData()
        {
        }

        public BoxData(BoxData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            NameRefId = other.NameRefId;
            NameRefIdAlias = other.NameRefIdAlias;
            List = RepeatedMessage<BoxSlot>().Clone(other.List);
        }

        public BoxData Clone()
        {
            return new BoxData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as BoxData);
        }

        public bool Equals(BoxData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (NameRefId != other.NameRefId) return false;
            if (NameRefIdAlias != other.NameRefIdAlias) return false;
            if (!RepeatedMessage<BoxSlot>().AreEqual(List, other.List)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (NameRefId != 0) hash ^= NameRefId.GetHashCode();
            if (NameRefIdAlias.Length != 0) hash ^= NameRefIdAlias.GetHashCode();
            hash ^= RepeatedMessage<BoxSlot>().GetHashCode(List);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (NameRefId != 0)
            {
                ctx.WriteRawTag(29);
                ctx.WriteSFixed32(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(NameRefIdAlias);
            }
            RepeatedMessage<BoxSlot>().Write(ref ctx, ref List, 42);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (NameRefId != 0)
            {
                size += 1 + ComputeSFixed32Size(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(NameRefIdAlias);
            }
            size += RepeatedMessage<BoxSlot>().CalculateSize(List, 42);
            return size;
        }

        public void MergeFrom(BoxData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.NameRefId != 0)
            {
                NameRefId = other.NameRefId;
            }
            if (other.NameRefIdAlias.Length != 0)
            {
                NameRefIdAlias = other.NameRefIdAlias;
            }
            List.AddRange(other.List);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 29:
                        NameRefId = ctx.ReadSFixed32();
                        break;
                    case 34:
                        NameRefIdAlias = ctx.ReadString();
                        break;
                    case 42:
                        RepeatedMessage<BoxSlot>().Read(ref ctx, ref List, 42);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        [IgnoreDataMember]
        public String Name => Instance.GetString(NameRefId);
        #endregion
    }

    public partial class BoxDataTable : Table, IMessage<BoxDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, BoxData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, BoxData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<BoxData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public BoxDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<BoxData>(Map));
        }

        public BoxDataTable(BoxDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<BoxData>(Map));
        }

        public BoxDataTable Clone()
        {
            return new BoxDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as BoxDataTable);
        }

        public bool Equals(BoxDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(BoxDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class BoxSlot : Data, IMessage<BoxSlot>, IBufferMessage
    {
        #region Proto.Field
        public int Slot;
        public int ItemRefId;
        public string ItemRefIdAlias = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public BoxSlot()
        {
        }

        public BoxSlot(BoxSlot other) : this()
        {
            Slot = other.Slot;
            ItemRefId = other.ItemRefId;
            ItemRefIdAlias = other.ItemRefIdAlias;
        }

        public BoxSlot Clone()
        {
            return new BoxSlot(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as BoxSlot);
        }

        public bool Equals(BoxSlot other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Slot != other.Slot) return false;
            if (ItemRefId != other.ItemRefId) return false;
            if (ItemRefIdAlias != other.ItemRefIdAlias) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Slot != 0) hash ^= Slot.GetHashCode();
            if (ItemRefId != 0) hash ^= ItemRefId.GetHashCode();
            if (ItemRefIdAlias.Length != 0) hash ^= ItemRefIdAlias.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Slot != 0)
            {
                ctx.WriteRawTag(8);
                ctx.WriteInt32(Slot);
            }
            if (ItemRefId != 0)
            {
                ctx.WriteRawTag(21);
                ctx.WriteSFixed32(ItemRefId);
            }
            if (ItemRefIdAlias.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(ItemRefIdAlias);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Slot != 0)
            {
                size += 1 + ComputeInt32Size(Slot);
            }
            if (ItemRefId != 0)
            {
                size += 1 + ComputeSFixed32Size(ItemRefId);
            }
            if (ItemRefIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(ItemRefIdAlias);
            }
            return size;
        }

        public void MergeFrom(BoxSlot other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Slot != 0)
            {
                Slot = other.Slot;
            }
            if (other.ItemRefId != 0)
            {
                ItemRefId = other.ItemRefId;
            }
            if (other.ItemRefIdAlias.Length != 0)
            {
                ItemRefIdAlias = other.ItemRefIdAlias;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Slot = ctx.ReadInt32();
                        break;
                    case 21:
                        ItemRefId = ctx.ReadSFixed32();
                        break;
                    case 26:
                        ItemRefIdAlias = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion

        #region Table
        [IgnoreDataMember]
        public ItemData Item => Instance.GetItemData(ItemRefId);
        #endregion
    }

    public partial class ClassData : Data, IMessage<ClassData>, IBufferMessage
    {
        #region Proto.Field
        public string Class = "";
        public string Grade = "";
        public string Unit = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public ClassData()
        {
        }

        public ClassData(ClassData other) : this()
        {
            Class = other.Class;
            Grade = other.Grade;
            Unit = other.Unit;
        }

        public ClassData Clone()
        {
            return new ClassData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ClassData);
        }

        public bool Equals(ClassData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Class != other.Class) return false;
            if (Grade != other.Grade) return false;
            if (Unit != other.Unit) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Class.Length != 0) hash ^= Class.GetHashCode();
            if (Grade.Length != 0) hash ^= Grade.GetHashCode();
            if (Unit.Length != 0) hash ^= Unit.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Class.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Class);
            }
            if (Grade.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(Grade);
            }
            if (Unit.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Unit);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Class.Length != 0)
            {
                size += 1 + ComputeStringSize(Class);
            }
            if (Grade.Length != 0)
            {
                size += 1 + ComputeStringSize(Grade);
            }
            if (Unit.Length != 0)
            {
                size += 1 + ComputeStringSize(Unit);
            }
            return size;
        }

        public void MergeFrom(ClassData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Class.Length != 0)
            {
                Class = other.Class;
            }
            if (other.Grade.Length != 0)
            {
                Grade = other.Grade;
            }
            if (other.Unit.Length != 0)
            {
                Unit = other.Unit;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Class = ctx.ReadString();
                        break;
                    case 18:
                        Grade = ctx.ReadString();
                        break;
                    case 26:
                        Unit = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class DepthDataTable : Table, IMessage<DepthDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, FirstData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, FirstData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<FirstData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public DepthDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<FirstData>(Map));
        }

        public DepthDataTable(DepthDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<FirstData>(Map));
        }

        public DepthDataTable Clone()
        {
            return new DepthDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as DepthDataTable);
        }

        public bool Equals(DepthDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(DepthDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class DiceData : Data, IMessage<DiceData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public int NameRefId;
        public string NameRefIdAlias = "";
        public List<int> ListItemRefId = new ();
        public List<string> ListItemRefIdAlias = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public DiceData()
        {
            ListItem.RefList = ListItemRefId;
        }

        public DiceData(DiceData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            NameRefId = other.NameRefId;
            NameRefIdAlias = other.NameRefIdAlias;
            ListItemRefId = RepeatedSFixed32().Clone(other.ListItemRefId);
            ListItemRefIdAlias = RepeatedString().Clone(other.ListItemRefIdAlias);
            ListItem.RefList = ListItemRefId;
        }

        public DiceData Clone()
        {
            return new DiceData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as DiceData);
        }

        public bool Equals(DiceData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (NameRefId != other.NameRefId) return false;
            if (NameRefIdAlias != other.NameRefIdAlias) return false;
            if (!RepeatedSFixed32().AreEqual(ListItemRefId, other.ListItemRefId)) return false;
            if (!RepeatedString().AreEqual(ListItemRefIdAlias, other.ListItemRefIdAlias)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (NameRefId != 0) hash ^= NameRefId.GetHashCode();
            if (NameRefIdAlias.Length != 0) hash ^= NameRefIdAlias.GetHashCode();
            hash ^= RepeatedSFixed32().GetHashCode(ListItemRefId);
            hash ^= RepeatedString().GetHashCode(ListItemRefIdAlias);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (NameRefId != 0)
            {
                ctx.WriteRawTag(29);
                ctx.WriteSFixed32(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(NameRefIdAlias);
            }
            RepeatedSFixed32().Write(ref ctx, ref ListItemRefId, 42);
            RepeatedString().Write(ref ctx, ref ListItemRefIdAlias, 50);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (NameRefId != 0)
            {
                size += 1 + ComputeSFixed32Size(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(NameRefIdAlias);
            }
            size += RepeatedSFixed32().CalculateSize(ListItemRefId, 42);
            size += RepeatedString().CalculateSize(ListItemRefIdAlias, 50);
            return size;
        }

        public void MergeFrom(DiceData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.NameRefId != 0)
            {
                NameRefId = other.NameRefId;
            }
            if (other.NameRefIdAlias.Length != 0)
            {
                NameRefIdAlias = other.NameRefIdAlias;
            }
            ListItemRefId.AddRange(other.ListItemRefId);
            ListItemRefIdAlias.AddRange(other.ListItemRefIdAlias);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 29:
                        NameRefId = ctx.ReadSFixed32();
                        break;
                    case 34:
                        NameRefIdAlias = ctx.ReadString();
                        break;
                    case 42:
                    case 45:
                        RepeatedSFixed32().Read(ref ctx, ref ListItemRefId, 42);
                        break;
                    case 50:
                        RepeatedString().Read(ref ctx, ref ListItemRefIdAlias, 50);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        [IgnoreDataMember]
        public String Name => Instance.GetString(NameRefId);
        [IgnoreDataMember]
        public ListIntGetter<ItemData> ListItem { get; } = new (null, id => Instance.GetItemData(id));
        #endregion
    }

    public partial class DiceDataTable : Table, IMessage<DiceDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, DiceData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, DiceData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<DiceData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public DiceDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<DiceData>(Map));
        }

        public DiceDataTable(DiceDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<DiceData>(Map));
        }

        public DiceDataTable Clone()
        {
            return new DiceDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as DiceDataTable);
        }

        public bool Equals(DiceDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(DiceDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class FirstData : Data, IMessage<FirstData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public NameCard F1Data = null;
        public ClassData F2Data = null;
        public Dictionary<int, SecondData> SecondMap = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, SecondData> _secondMap_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SecondData>.MessageCodec, 42, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public FirstData()
        {
        }

        public FirstData(FirstData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            if (other.F1Data != null) F1Data = other.F1Data.Clone();
            if (other.F2Data != null) F2Data = other.F2Data.Clone();
            SecondMap = _secondMap_codec.Clone(other.SecondMap);
        }

        public FirstData Clone()
        {
            return new FirstData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as FirstData);
        }

        public bool Equals(FirstData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!object.Equals(F1Data, other.F1Data)) return false;
            if (!object.Equals(F2Data, other.F2Data)) return false;
            if (!_secondMap_codec.AreEqual(SecondMap, other.SecondMap)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (F1Data != null) hash ^= F1Data.GetHashCode();
            if (F2Data != null) hash ^= F2Data.GetHashCode();
            hash ^= _secondMap_codec.GetHashCode(SecondMap);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (F1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(F1Data);
            }
            if (F2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(F2Data);
            }
            _secondMap_codec.WriteTo(ref ctx, ref SecondMap);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (F1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F1Data);
            }
            if (F2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F2Data);
            }
            size += _secondMap_codec.CalculateSize(SecondMap);
            return size;
        }

        public void MergeFrom(FirstData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.F1Data != null)
            {
                if (F1Data == null)
                    F1Data = new NameCard();
                F1Data.MergeFrom(other.F1Data);
            }
            if (other.F2Data != null)
            {
                if (F2Data == null)
                    F2Data = new ClassData();
                F2Data.MergeFrom(other.F2Data);
            }
            _secondMap_codec.Merge(SecondMap, other.SecondMap);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        if (F1Data == null)
                            F1Data = new NameCard();
                        ctx.ReadMessage(F1Data);
                        break;
                    case 34:
                        if (F2Data == null)
                            F2Data = new ClassData();
                        ctx.ReadMessage(F2Data);
                        break;
                    case 42:
                        _secondMap_codec.Read(ref ctx, ref SecondMap);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class ItemData : Data, IMessage<ItemData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public int NameRefId;
        public string NameRefIdAlias = "";
        public ItemType Type;
        public int SlotSize;
        public int Weight;
        #endregion

        #region xpTURN.Protobuf.Method
        public ItemData()
        {
        }

        public ItemData(ItemData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            NameRefId = other.NameRefId;
            NameRefIdAlias = other.NameRefIdAlias;
            Type = other.Type;
            SlotSize = other.SlotSize;
            Weight = other.Weight;
        }

        public ItemData Clone()
        {
            return new ItemData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ItemData);
        }

        public bool Equals(ItemData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (NameRefId != other.NameRefId) return false;
            if (NameRefIdAlias != other.NameRefIdAlias) return false;
            if (Type != other.Type) return false;
            if (SlotSize != other.SlotSize) return false;
            if (Weight != other.Weight) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (NameRefId != 0) hash ^= NameRefId.GetHashCode();
            if (NameRefIdAlias.Length != 0) hash ^= NameRefIdAlias.GetHashCode();
            if (Type != default(ItemType)) hash ^= Type.GetHashCode();
            if (SlotSize != 0) hash ^= SlotSize.GetHashCode();
            if (Weight != 0) hash ^= Weight.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (NameRefId != 0)
            {
                ctx.WriteRawTag(29);
                ctx.WriteSFixed32(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(NameRefIdAlias);
            }
            if (Type != default(ItemType))
            {
                ctx.WriteRawTag(40);
                ctx.WriteEnum((int)Type);
            }
            if (SlotSize != 0)
            {
                ctx.WriteRawTag(48);
                ctx.WriteInt32(SlotSize);
            }
            if (Weight != 0)
            {
                ctx.WriteRawTag(56);
                ctx.WriteInt32(Weight);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (NameRefId != 0)
            {
                size += 1 + ComputeSFixed32Size(NameRefId);
            }
            if (NameRefIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(NameRefIdAlias);
            }
            if (Type != default(ItemType))
            {
                size += 1 + ComputeEnumSize((int)Type);
            }
            if (SlotSize != 0)
            {
                size += 1 + ComputeInt32Size(SlotSize);
            }
            if (Weight != 0)
            {
                size += 1 + ComputeInt32Size(Weight);
            }
            return size;
        }

        public void MergeFrom(ItemData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.NameRefId != 0)
            {
                NameRefId = other.NameRefId;
            }
            if (other.NameRefIdAlias.Length != 0)
            {
                NameRefIdAlias = other.NameRefIdAlias;
            }
            if (other.Type != default(ItemType))
            {
                Type = other.Type;
            }
            if (other.SlotSize != 0)
            {
                SlotSize = other.SlotSize;
            }
            if (other.Weight != 0)
            {
                Weight = other.Weight;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 29:
                        NameRefId = ctx.ReadSFixed32();
                        break;
                    case 34:
                        NameRefIdAlias = ctx.ReadString();
                        break;
                    case 40:
                        Type = (ItemType)ctx.ReadEnum();
                        break;
                    case 48:
                        SlotSize = ctx.ReadInt32();
                        break;
                    case 56:
                        Weight = ctx.ReadInt32();
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        [IgnoreDataMember]
        public String Name => Instance.GetString(NameRefId);
        #endregion
    }

    public partial class ItemDataTable : Table, IMessage<ItemDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, ItemData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, ItemData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<ItemData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public ItemDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<ItemData>(Map));
        }

        public ItemDataTable(ItemDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<ItemData>(Map));
        }

        public ItemDataTable Clone()
        {
            return new ItemDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ItemDataTable);
        }

        public bool Equals(ItemDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(ItemDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class LocaleDataTable : Table, IMessage<LocaleDataTable>, IBufferMessage
    {
        #region Proto.Field
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, TextDataTable> _map_codec
            = new (xpFieldHelper.Int32Codec, xpFieldCodecForMessage<TextDataTable>.MessageCodec, 10, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public LocaleDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TextDataTable>(Map), Instance.EnableWeakRef);
        }

        public LocaleDataTable(LocaleDataTable other) : this()
        {
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TextDataTable>(Map), Instance.EnableWeakRef);
        }

        public LocaleDataTable Clone()
        {
            return new LocaleDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as LocaleDataTable);
        }

        public bool Equals(LocaleDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(LocaleDataTable other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }

            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        protected Dictionary<int, TextDataTable> Map { get; } = new ();
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class NameCard : Data, IMessage<NameCard>, IBufferMessage
    {
        #region Proto.Field
        public string Name = "";
        public int Number;
        public string Location = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public NameCard()
        {
        }

        public NameCard(NameCard other) : this()
        {
            Name = other.Name;
            Number = other.Number;
            Location = other.Location;
        }

        public NameCard Clone()
        {
            return new NameCard(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NameCard);
        }

        public bool Equals(NameCard other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Name != other.Name) return false;
            if (Number != other.Number) return false;
            if (Location != other.Location) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Number != 0) hash ^= Number.GetHashCode();
            if (Location.Length != 0) hash ^= Location.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Name.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Name);
            }
            if (Number != 0)
            {
                ctx.WriteRawTag(16);
                ctx.WriteInt32(Number);
            }
            if (Location.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Location);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + ComputeStringSize(Name);
            }
            if (Number != 0)
            {
                size += 1 + ComputeInt32Size(Number);
            }
            if (Location.Length != 0)
            {
                size += 1 + ComputeStringSize(Location);
            }
            return size;
        }

        public void MergeFrom(NameCard other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Number != 0)
            {
                Number = other.Number;
            }
            if (other.Location.Length != 0)
            {
                Location = other.Location;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Name = ctx.ReadString();
                        break;
                    case 16:
                        Number = ctx.ReadInt32();
                        break;
                    case 26:
                        Location = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class NumberData : Data, IMessage<NumberData>, IBufferMessage
    {
        #region Proto.Field
        public NumberType Id;
        public int Value;
        #endregion

        #region xpTURN.Protobuf.Method
        public NumberData()
        {
        }

        public NumberData(NumberData other) : this()
        {
            Id = other.Id;
            Value = other.Value;
        }

        public NumberData Clone()
        {
            return new NumberData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumberData);
        }

        public bool Equals(NumberData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (Value != other.Value) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != default(NumberType)) hash ^= Id.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != default(NumberType))
            {
                ctx.WriteRawTag(8);
                ctx.WriteEnum((int)Id);
            }
            if (Value != 0)
            {
                ctx.WriteRawTag(16);
                ctx.WriteInt32(Value);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != default(NumberType))
            {
                size += 1 + ComputeEnumSize((int)Id);
            }
            if (Value != 0)
            {
                size += 1 + ComputeInt32Size(Value);
            }
            return size;
        }

        public void MergeFrom(NumberData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != default(NumberType))
            {
                Id = other.Id;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = (NumberType)ctx.ReadEnum();
                        break;
                    case 16:
                        Value = ctx.ReadInt32();
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => (int)Id;
        #endregion
    }

    public partial class NumberDataTable : Table, IMessage<NumberDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<NumberType, NumberData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<NumberType, NumberData> _map_codec
            = new (xpFieldCodecForEnum<NumberType>.EnumCodec, xpFieldCodecForMessage<NumberData>.MessageCodec, 10, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NumberDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumberType, NumberData>(Map));
        }

        public NumberDataTable(NumberDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumberType, NumberData>(Map));
        }

        public NumberDataTable Clone()
        {
            return new NumberDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumberDataTable);
        }

        public bool Equals(NumberDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(NumberDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class NumbersData : Data, IMessage<NumbersData>, IBufferMessage
    {
        #region Proto.Field
        public NumbersType Id;
        public List<int> Value = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public NumbersData()
        {
        }

        public NumbersData(NumbersData other) : this()
        {
            Id = other.Id;
            Value = RepeatedSFixed32().Clone(other.Value);
        }

        public NumbersData Clone()
        {
            return new NumbersData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumbersData);
        }

        public bool Equals(NumbersData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (!RepeatedSFixed32().AreEqual(Value, other.Value)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != default(NumbersType)) hash ^= Id.GetHashCode();
            hash ^= RepeatedSFixed32().GetHashCode(Value);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != default(NumbersType))
            {
                ctx.WriteRawTag(8);
                ctx.WriteEnum((int)Id);
            }
            RepeatedSFixed32().Write(ref ctx, ref Value, 18);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != default(NumbersType))
            {
                size += 1 + ComputeEnumSize((int)Id);
            }
            size += RepeatedSFixed32().CalculateSize(Value, 18);
            return size;
        }

        public void MergeFrom(NumbersData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != default(NumbersType))
            {
                Id = other.Id;
            }
            Value.AddRange(other.Value);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = (NumbersType)ctx.ReadEnum();
                        break;
                    case 18:
                    case 21:
                        RepeatedSFixed32().Read(ref ctx, ref Value, 18);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => (int)Id;
        #endregion
    }

    public partial class NumbersDataTable : Table, IMessage<NumbersDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<NumbersType, NumbersData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<NumbersType, NumbersData> _map_codec
            = new (xpFieldCodecForEnum<NumbersType>.EnumCodec, xpFieldCodecForMessage<NumbersData>.MessageCodec, 10, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NumbersDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumbersType, NumbersData>(Map));
        }

        public NumbersDataTable(NumbersDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumbersType, NumbersData>(Map));
        }

        public NumbersDataTable Clone()
        {
            return new NumbersDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumbersDataTable);
        }

        public bool Equals(NumbersDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(NumbersDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class SecondData : Data, IMessage<SecondData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string Second1 = "";
        public string Second2 = "";
        public NameCard S1Data = null;
        public ClassData S2Data = null;
        public Dictionary<int, ThirdData> ThirdMap = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, ThirdData> _thirdMap_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<ThirdData>.MessageCodec, 58, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public SecondData()
        {
        }

        public SecondData(SecondData other) : this()
        {
            Id = other.Id;
            Second1 = other.Second1;
            Second2 = other.Second2;
            if (other.S1Data != null) S1Data = other.S1Data.Clone();
            if (other.S2Data != null) S2Data = other.S2Data.Clone();
            ThirdMap = _thirdMap_codec.Clone(other.ThirdMap);
        }

        public SecondData Clone()
        {
            return new SecondData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SecondData);
        }

        public bool Equals(SecondData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (Second1 != other.Second1) return false;
            if (Second2 != other.Second2) return false;
            if (!object.Equals(S1Data, other.S1Data)) return false;
            if (!object.Equals(S2Data, other.S2Data)) return false;
            if (!_thirdMap_codec.AreEqual(ThirdMap, other.ThirdMap)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (Second1.Length != 0) hash ^= Second1.GetHashCode();
            if (Second2.Length != 0) hash ^= Second2.GetHashCode();
            if (S1Data != null) hash ^= S1Data.GetHashCode();
            if (S2Data != null) hash ^= S2Data.GetHashCode();
            hash ^= _thirdMap_codec.GetHashCode(ThirdMap);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (Second1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Second1);
            }
            if (Second2.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(Second2);
            }
            if (S1Data != null)
            {
                ctx.WriteRawTag(42);
                ctx.WriteMessage(S1Data);
            }
            if (S2Data != null)
            {
                ctx.WriteRawTag(50);
                ctx.WriteMessage(S2Data);
            }
            _thirdMap_codec.WriteTo(ref ctx, ref ThirdMap);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (Second1.Length != 0)
            {
                size += 1 + ComputeStringSize(Second1);
            }
            if (Second2.Length != 0)
            {
                size += 1 + ComputeStringSize(Second2);
            }
            if (S1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S1Data);
            }
            if (S2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S2Data);
            }
            size += _thirdMap_codec.CalculateSize(ThirdMap);
            return size;
        }

        public void MergeFrom(SecondData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.Second1.Length != 0)
            {
                Second1 = other.Second1;
            }
            if (other.Second2.Length != 0)
            {
                Second2 = other.Second2;
            }
            if (other.S1Data != null)
            {
                if (S1Data == null)
                    S1Data = new NameCard();
                S1Data.MergeFrom(other.S1Data);
            }
            if (other.S2Data != null)
            {
                if (S2Data == null)
                    S2Data = new ClassData();
                S2Data.MergeFrom(other.S2Data);
            }
            _thirdMap_codec.Merge(ThirdMap, other.ThirdMap);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 26:
                        Second1 = ctx.ReadString();
                        break;
                    case 34:
                        Second2 = ctx.ReadString();
                        break;
                    case 42:
                        if (S1Data == null)
                            S1Data = new NameCard();
                        ctx.ReadMessage(S1Data);
                        break;
                    case 50:
                        if (S2Data == null)
                            S2Data = new ClassData();
                        ctx.ReadMessage(S2Data);
                        break;
                    case 58:
                        _thirdMap_codec.Read(ref ctx, ref ThirdMap);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class TextData : Data, IMessage<TextData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public string Text = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public TextData()
        {
        }

        public TextData(TextData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Text = other.Text;
        }

        public TextData Clone()
        {
            return new TextData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as TextData);
        }

        public bool Equals(TextData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (Text != other.Text) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (Text.Length != 0) hash ^= Text.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(8);
                ctx.WriteInt32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (Text.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Text);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeInt32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (Text.Length != 0)
            {
                size += 1 + ComputeStringSize(Text);
            }
            return size;
        }

        public void MergeFrom(TextData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.Text.Length != 0)
            {
                Text = other.Text;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = ctx.ReadInt32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        Text = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class TextDataTable : Table, IMessage<TextDataTable>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, TextData> _map_codec
            = new (xpFieldHelper.Int32Codec, xpFieldCodecForMessage<TextData>.MessageCodec, 18, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public TextDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TextData>(Map), Instance.EnableWeakRef);
        }

        public TextDataTable(TextDataTable other) : this()
        {
            Id = other.Id;
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TextData>(Map), Instance.EnableWeakRef);
        }

        public TextDataTable Clone()
        {
            return new TextDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as TextDataTable);
        }

        public bool Equals(TextDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(8);
                ctx.WriteInt32(Id);
            }
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeInt32Size(Id);
            }
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(TextDataTable other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }

            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = ctx.ReadInt32();
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        protected Dictionary<int, TextData> Map { get; } = new ();
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class ThirdData : Data, IMessage<ThirdData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string Third1 = "";
        public string Third2 = "";
        public NameCard T1Data = null;
        public ClassData T2Data = null;
        #endregion

        #region xpTURN.Protobuf.Method
        public ThirdData()
        {
        }

        public ThirdData(ThirdData other) : this()
        {
            Id = other.Id;
            Third1 = other.Third1;
            Third2 = other.Third2;
            if (other.T1Data != null) T1Data = other.T1Data.Clone();
            if (other.T2Data != null) T2Data = other.T2Data.Clone();
        }

        public ThirdData Clone()
        {
            return new ThirdData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ThirdData);
        }

        public bool Equals(ThirdData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (Third1 != other.Third1) return false;
            if (Third2 != other.Third2) return false;
            if (!object.Equals(T1Data, other.T1Data)) return false;
            if (!object.Equals(T2Data, other.T2Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (Third1.Length != 0) hash ^= Third1.GetHashCode();
            if (Third2.Length != 0) hash ^= Third2.GetHashCode();
            if (T1Data != null) hash ^= T1Data.GetHashCode();
            if (T2Data != null) hash ^= T2Data.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (Third1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Third1);
            }
            if (Third2.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(Third2);
            }
            if (T1Data != null)
            {
                ctx.WriteRawTag(42);
                ctx.WriteMessage(T1Data);
            }
            if (T2Data != null)
            {
                ctx.WriteRawTag(50);
                ctx.WriteMessage(T2Data);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (Third1.Length != 0)
            {
                size += 1 + ComputeStringSize(Third1);
            }
            if (Third2.Length != 0)
            {
                size += 1 + ComputeStringSize(Third2);
            }
            if (T1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T1Data);
            }
            if (T2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T2Data);
            }
            return size;
        }

        public void MergeFrom(ThirdData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.Third1.Length != 0)
            {
                Third1 = other.Third1;
            }
            if (other.Third2.Length != 0)
            {
                Third2 = other.Third2;
            }
            if (other.T1Data != null)
            {
                if (T1Data == null)
                    T1Data = new NameCard();
                T1Data.MergeFrom(other.T1Data);
            }
            if (other.T2Data != null)
            {
                if (T2Data == null)
                    T2Data = new ClassData();
                T2Data.MergeFrom(other.T2Data);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 26:
                        Third1 = ctx.ReadString();
                        break;
                    case 34:
                        Third2 = ctx.ReadString();
                        break;
                    case 42:
                        if (T1Data == null)
                            T1Data = new NameCard();
                        ctx.ReadMessage(T1Data);
                        break;
                    case 50:
                        if (T2Data == null)
                            T2Data = new ClassData();
                        ctx.ReadMessage(T2Data);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class TranslatedData : Data, IMessage<TranslatedData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public Dictionary<string, string> Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<string, string> _map_codec
            = new (xpFieldHelper.StringCodec, xpFieldHelper.StringCodec, 26, 10, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public TranslatedData()
        {
        }

        public TranslatedData(TranslatedData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Map = _map_codec.Clone(other.Map);
        }

        public TranslatedData Clone()
        {
            return new TranslatedData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as TranslatedData);
        }

        public bool Equals(TranslatedData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            hash ^= _map_codec.GetHashCode(Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            _map_codec.WriteTo(ref ctx, ref Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            size += _map_codec.CalculateSize(Map);
            return size;
        }

        public void MergeFrom(TranslatedData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class TranslatedDataTable : Table, IMessage<TranslatedDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, TranslatedData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, TranslatedData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<TranslatedData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public TranslatedDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TranslatedData>(Map));
        }

        public TranslatedDataTable(TranslatedDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<TranslatedData>(Map));
        }

        public TranslatedDataTable Clone()
        {
            return new TranslatedDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as TranslatedDataTable);
        }

        public bool Equals(TranslatedDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(TranslatedDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public enum ItemType
    {
        TypeNone = 0,
        TypePosion = 1,
        TypeEquip = 2,
        TypeVehicle = 3,
    }

    public enum NumberType
    {
        NUMBER_NONE = 0,
        /// <summary>
        /// Desc : 강인함 / Strength
        /// </summary>
        STAT_STR_BASE = 1,
        /// <summary>
        /// Desc : 민첩 / Agility
        /// </summary>
        STAT_AGI_BSSE = 2,
        /// <summary>
        /// Desc : 손재주 / Dexterity
        /// </summary>
        STAT_DEX_BASE = 3,
        /// <summary>
        /// Desc : 체력 / Constitution
        /// </summary>
        STAT_CON_BASE = 4,
        /// <summary>
        /// Desc : 지능 / Intelligence
        /// </summary>
        STAT_INT_BASE = 5,
        /// <summary>
        /// Desc : 지혜 / Wisdom
        /// </summary>
        STAT_WIS_BASE = 6,
        /// <summary>
        /// Desc : 매력 / Carisma
        /// </summary>
        STAT_CHA_BASE = 7,
        /// <summary>
        /// Desc : 기운 / Aura
        /// </summary>
        STAT_AUR_BASE = 8,
        /// <summary>
        /// Desc : 운 / Luck
        /// </summary>
        STAT_LCK_BASE = 9,
        /// <summary>
        /// Desc : 운명 / Fate
        /// </summary>
        STAT_FAT_BASE = 10,
        /// <summary>
        /// Desc : 마력 / Magic
        /// </summary>
        STAT_MGC_BASE = 11,
        /// <summary>
        /// Desc : 의지 / WillPower
        /// </summary>
        STAT_WIL_BASE = 12,
        /// <summary>
        /// Desc : 정기 / Essence
        /// </summary>
        STAT_ESS_BASE = 13,
        /// <summary>
        /// Desc : 힘 / Power
        /// </summary>
        STAT_POW_BASE = 14,
    }

    public enum NumbersType
    {
        NUMBERS_NONE = 0,
        BASIC_REWARD_ITEMS_WARRIOR = 1,
        BASIC_REWARD_ITEMS_ROGUE = 2,
        BASIC_REWARD_ITEMS_WIZARD = 3,
        BASIC_REWARD_ITEMS_CLERIC = 4,
        BASIC_REWARD_ITEMS_ARCHER = 5,
    }

    public enum SAMPLE_NUMBER
    {
        N01_000 = 0,
        N01_001 = 1,
        N01_002 = 2,
        N01_003 = 3,
        N01_004 = 4,
        N01_005 = 5,
        N01_006 = 6,
        N01_007 = 7,
        N01_008 = 8,
        N01_009 = 9,
        N01_010 = 10,
        N02_001 = 11,
        N02_002 = 12,
        N02_003 = 13,
        N02_004 = 14,
        N02_005 = 15,
        N02_006 = 16,
        N02_007 = 17,
        N02_008 = 18,
        N02_009 = 19,
        N02_010 = 20,
    }

}
#nullable restore
#endregion

using System;
using System.IO;
using System.Collections.Generic;

using NUnit.Framework;

using xpTURN.Common;
using xpTURN.ProtoGen;

using static xpTURN.Common.FileUtils;

namespace xpTURN.TableGen.TestCases
{
    [TestFixture]
    internal class ProtoGenTests
    {

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            xpTURN.MegaData.JsonWrapper.FromJsonMethod = xpTURN.Tool.Common.JsonUtils.FromJson;
            xpTURN.MegaData.JsonWrapper.ToJsonMethod = xpTURN.Tool.Common.JsonUtils.ToJson;

            //
            Logger.Log.SetLogger(new xpTURN.Tool.Common.Log(typeof(ProtoGenTests)), true);

            //
            AssemblyUtils.LoadAllDependencies();

            //
            var path = TestContext.CurrentContext.TestDirectory;
            path = Path.Combine(path, "../");
            path = Path.Combine(path, "../");
            path = Path.Combine(path, "../");
            path = Path.Combine(path, "../");
            path = Path.GetFullPath(path);
            Environment.CurrentDirectory = path;
        }

        [SetUp]
        public void Setup()
        {
            Logger.Log.Tool.Clear();
            xpTURN.ProtoGen.ProtoGen.Clear();
        }

        [Test, Order(1)]
        public void DoTableGen_AllTypes()
        {
            Logger.Log.Info("DoTableGen_AllTypes Test Start");

            // Arrange
            var options = new Dictionary<string, string>
            {
                { "Input", "./Tests/DataSet/AllTypes/[Define]/" },
                { "Output", "./Tests/Proto/Define/" },
                { "OutputType", "cs;proto" },
                { "Namespace", "Tests.AllTypes" },
                { "TableSetName", "AllTypesTableSet" },
                { "OutputComment", "true" },
                { "OutputSplit", "false" },
                { "ForDataTable", "false" },
                { "TagComment", "true" }
            };
            List<string> ignoreFiles = new()
            {
                "^~$*", // Exclude Excel backup files
                @"^#.*", // Exclude files
            };
            List<string> ignoreFolders = new()
            {
                @"\[Result\]" // Exclude Result files
            };
            var searchPatterns = new List<string> { "*.xls*" };

            List<string> inputFiles = GetTartgetFile(new List<string> { options.GetCustomOption("Input") }, searchPatterns, SearchOption.AllDirectories, ignoreFiles, ignoreFolders);

            // Act
            bool result = xpTURN.TableGen.TableGen.DoGenerate(inputFiles, options);

            // Assert
            Assert.That(result, Is.True);

            Logger.Log.Info("DoTableGen_AllTypes Test End");
        }

        [Test, Order(2)]
        public void DoProtoGen_AllTypes()
        {
            Logger.Log.Info("DoProtoGen_AllTypes Test Start");

            // Arrange
            var options = new Dictionary<string, string>
            {
                { "Input", "./Tests/Proto/Define/" },
                { "InputType", "proto" },
                { "Output", "./Tests/Proto/Output/" },
                { "OutputType", "cs" },
                { "Namespace", "Tests.AllTypes" },
                { "TableSetName", "" },
                { "OutputComment", "true" },
                { "OutputSplit", "false" },
                { "ForDataTable", "false" },
                { "TagComment", "true" }
            };
            List<string> ignoreFiles = new()
            {
                "^~$*", // Exclude Excel backup files
                @"^#.*", // Exclude files
            };
            List<string> ignoreFolders = new()
            {
                @"\[Result\]" // Exclude Result files
            };
            var searchPatterns = new List<string> { "AllTypesTableSet.AutoGenerated.proto" };

            List<string> inputFiles = GetTartgetFile(new List<string> { options.GetCustomOption("Input") }, searchPatterns, SearchOption.AllDirectories, ignoreFiles, ignoreFolders);
            List<string> importPaths = new()
            {
                Directory.GetCurrentDirectory(),
                Path.GetDirectoryName(typeof(Program).Assembly.Location),
            };

            // Act
            bool result = xpTURN.ProtoGen.ProtoGen.DoGenerate(inputFiles, importPaths, options);

            // Assert
            Assert.That(result, Is.True);

            string file1 = $"{Environment.CurrentDirectory}/Tests/Proto/Define/AllTypesTableSet.All.AutoGenerated.cs";
            string file2 = $"{Environment.CurrentDirectory}/Tests/Proto/Output/AllTypesTableSet.AutoGenerated.cs";
            Assert.That(File.ReadAllText(file1), Is.EqualTo(File.ReadAllText(file2)));

            Logger.Log.Info("DoProtoGen_AllTypes Test End");
        }

        [Test, Order(1)]
        public void DoTableGen_CustomField()
        {
            Logger.Log.Info("DoTableGen_CustomField Test Start");

            // Arrange
            var options = new Dictionary<string, string>
            {
                { "Input", "./Tests/DataSet/CustomField/[Define]/" },
                { "InputType", "proto" },
                { "Output", "./Tests/Proto/Define/" },
                { "OutputType", "cs;proto" },
                { "Namespace", "Tests.CustomField" },
                { "TableSetName", "CustomFieldTableSet" },
                { "OutputComment", "true" },
                { "OutputSplit", "false" },
                { "ForDataTable", "false" },
                { "TagComment", "true" }
            };
            List<string> ignoreFiles = new()
            {
                "^~$*", // Exclude Excel backup files
                @"^#.*", // Exclude files
            };
            List<string> ignoreFolders = new()
            {
                @"\[Result\]" // Exclude Result files
            };
            var searchPatterns = new List<string> { "*.xls*" };

            List<string> inputFiles = GetTartgetFile(new List<string> { options.GetCustomOption("Input") }, searchPatterns, SearchOption.AllDirectories, ignoreFiles, ignoreFolders);

            // Act
            bool result = xpTURN.TableGen.TableGen.DoGenerate(inputFiles, options);

            // Assert
            Assert.That(result, Is.True);

            Logger.Log.Info("DoTableGen_CustomField Test End");
        }

        [Test, Order(2)]
        public void DoProtoGen_CustomField()
        {
            Logger.Log.Info("DoProtoGen_CustomField Test Start");

            // Arrange
            var options = new Dictionary<string, string>
            {
                { "Input", "./Tests/Proto/Define/" },
                { "InputType", "proto" },
                { "Output", "./Tests/Proto/Output/" },
                { "OutputType", "cs" },
                { "Namespace", "Tests.CustomField.proto" },
                { "TableSetName", "" },
                { "OutputComment", "true" },
                { "OutputSplit", "false" },
                { "ForDataTable", "false" },
                { "TagComment", "true" }
            };
            List<string> ignoreFiles = new()
            {
                "^~$*", // Exclude Excel backup files
                @"^#.*", // Exclude files
            };
            List<string> ignoreFolders = new()
            {
                @"\[Result\]" // Exclude Result files
            };
            var searchPatterns = new List<string> { "CustomFieldTableSet.AutoGenerated.proto" };

            List<string> inputFiles = GetTartgetFile(new List<string> { options.GetCustomOption("Input") }, searchPatterns, SearchOption.AllDirectories, ignoreFiles, ignoreFolders);
            List<string> importPaths = new()
            {
                Directory.GetCurrentDirectory(),
                Path.GetDirectoryName(typeof(Program).Assembly.Location),
            };

            // Act
            bool result = xpTURN.ProtoGen.ProtoGen.DoGenerate(inputFiles, importPaths, options);

            // Assert
            Assert.That(result, Is.True);

            string file1 = $"{Environment.CurrentDirectory}/Tests/Proto/Define/CustomFieldTableSet.All.AutoGenerated.cs";
            string file2 = $"{Environment.CurrentDirectory}/Tests/Proto/Output/CustomFieldTableSet.AutoGenerated.cs";
            Assert.That(File.ReadAllText(file1), Is.EqualTo(File.ReadAllText(file2)));

            Logger.Log.Info("DoProtoGen_CustomField Test End");
        }
    }
}

// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Tests.CustomField.CustomFieldTableSet;

namespace Tests.CustomField
{
    public partial class CustomFieldData : Data, IMessage<CustomFieldData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Guid Guid_1 = Guid.Empty;
        public Uri Uri_1;
        #endregion

        #region xpTURN.Protobuf.Method
        public CustomFieldData()
        {
        }

        public CustomFieldData(CustomFieldData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Guid_1 = other.Guid_1;
            Uri_1 = other.Uri_1;
        }

        public CustomFieldData Clone()
        {
            return new CustomFieldData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as CustomFieldData);
        }

        public bool Equals(CustomFieldData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(24);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(32);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(42);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(50);
                ctx.WriteString(Uri_1.ToString());
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 1 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 1 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                size += 1 + ComputeStringSize(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                size += 1 + ComputeStringSize(Uri_1.ToString());
            }
            return size;
        }

        public void MergeFrom(CustomFieldData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 24:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 32:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 42:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 50:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class CustomFieldDataTable : Table, IMessage<CustomFieldDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, CustomFieldData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, CustomFieldData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<CustomFieldData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public CustomFieldDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<CustomFieldData>(Map));
        }

        public CustomFieldDataTable(CustomFieldDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<CustomFieldData>(Map));
        }

        public CustomFieldDataTable Clone()
        {
            return new CustomFieldDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as CustomFieldDataTable);
        }

        public bool Equals(CustomFieldDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(CustomFieldDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

}
#nullable restore
#endregion

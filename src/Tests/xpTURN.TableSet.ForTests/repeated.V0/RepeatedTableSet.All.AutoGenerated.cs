// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Tests.Repeated.V0.RepeatedTableSet;

namespace Tests.Repeated.V0
{
    public partial class RepeatedData : Data, IMessage<RepeatedData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public SAMPLE_NUMBER Enum_1;
        public bool Bool_1;
        public int Int32_1;
        public int SInt32_1;
        public int SFixed32_1;
        public uint UInt32_1;
        public uint Fixed32_1;
        public long Int64_1;
        public long SInt64_1;
        public long SFixed64_1;
        public ulong UInt64_1;
        public ulong Fixed64_1;
        public float Float_1;
        public double Double_1;
        public string String_1 = "";
        public ByteString Bytes_1 = ByteString.Empty;
        public SampleInfo Msg_1 = null;
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Guid Guid_1 = Guid.Empty;
        public Uri Uri_1;
        #endregion

        #region xpTURN.Protobuf.Method
        public RepeatedData()
        {
        }

        public RepeatedData(RepeatedData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Enum_1 = other.Enum_1;
            Bool_1 = other.Bool_1;
            Int32_1 = other.Int32_1;
            SInt32_1 = other.SInt32_1;
            SFixed32_1 = other.SFixed32_1;
            UInt32_1 = other.UInt32_1;
            Fixed32_1 = other.Fixed32_1;
            Int64_1 = other.Int64_1;
            SInt64_1 = other.SInt64_1;
            SFixed64_1 = other.SFixed64_1;
            UInt64_1 = other.UInt64_1;
            Fixed64_1 = other.Fixed64_1;
            Float_1 = other.Float_1;
            Double_1 = other.Double_1;
            String_1 = other.String_1;
            Bytes_1 = other.Bytes_1;
            if (other.Msg_1 != null) Msg_1 = other.Msg_1.Clone();
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Guid_1 = other.Guid_1;
            Uri_1 = other.Uri_1;
        }

        public RepeatedData Clone()
        {
            return new RepeatedData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as RepeatedData);
        }

        public bool Equals(RepeatedData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (Enum_1 != other.Enum_1) return false;
            if (Bool_1 != other.Bool_1) return false;
            if (Int32_1 != other.Int32_1) return false;
            if (SInt32_1 != other.SInt32_1) return false;
            if (SFixed32_1 != other.SFixed32_1) return false;
            if (UInt32_1 != other.UInt32_1) return false;
            if (Fixed32_1 != other.Fixed32_1) return false;
            if (Int64_1 != other.Int64_1) return false;
            if (SInt64_1 != other.SInt64_1) return false;
            if (SFixed64_1 != other.SFixed64_1) return false;
            if (UInt64_1 != other.UInt64_1) return false;
            if (Fixed64_1 != other.Fixed64_1) return false;
            if (!BitwiseSingleEqualityComparer.Equals(Float_1, other.Float_1)) return false;
            if (!BitwiseDoubleEqualityComparer.Equals(Double_1, other.Double_1)) return false;
            if (String_1 != other.String_1) return false;
            if (Bytes_1 != other.Bytes_1) return false;
            if (!object.Equals(Msg_1, other.Msg_1)) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (Enum_1 != default(SAMPLE_NUMBER)) hash ^= Enum_1.GetHashCode();
            if (Bool_1 != false) hash ^= Bool_1.GetHashCode();
            if (Int32_1 != 0) hash ^= Int32_1.GetHashCode();
            if (SInt32_1 != 0) hash ^= SInt32_1.GetHashCode();
            if (SFixed32_1 != 0) hash ^= SFixed32_1.GetHashCode();
            if (UInt32_1 != 0U) hash ^= UInt32_1.GetHashCode();
            if (Fixed32_1 != 0U) hash ^= Fixed32_1.GetHashCode();
            if (Int64_1 != 0L) hash ^= Int64_1.GetHashCode();
            if (SInt64_1 != 0L) hash ^= SInt64_1.GetHashCode();
            if (SFixed64_1 != 0L) hash ^= SFixed64_1.GetHashCode();
            if (UInt64_1 != 0UL) hash ^= UInt64_1.GetHashCode();
            if (Fixed64_1 != 0UL) hash ^= Fixed64_1.GetHashCode();
            if (Float_1 != 0F) hash ^= BitwiseSingleEqualityComparer.GetHashCode(Float_1);
            if (Double_1 != 0D) hash ^= BitwiseDoubleEqualityComparer.GetHashCode(Double_1);
            if (String_1.Length != 0) hash ^= String_1.GetHashCode();
            if (Bytes_1.Length != 0) hash ^= Bytes_1.GetHashCode();
            if (Msg_1 != null) hash ^= Msg_1.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                ctx.WriteRawTag(24);
                ctx.WriteEnum((int)Enum_1);
            }
            if (Bool_1 != false)
            {
                ctx.WriteRawTag(32);
                ctx.WriteBool(Bool_1);
            }
            if (Int32_1 != 0)
            {
                ctx.WriteRawTag(40);
                ctx.WriteInt32(Int32_1);
            }
            if (SInt32_1 != 0)
            {
                ctx.WriteRawTag(48);
                ctx.WriteSInt32(SInt32_1);
            }
            if (SFixed32_1 != 0)
            {
                ctx.WriteRawTag(61);
                ctx.WriteSFixed32(SFixed32_1);
            }
            if (UInt32_1 != 0U)
            {
                ctx.WriteRawTag(64);
                ctx.WriteUInt32(UInt32_1);
            }
            if (Fixed32_1 != 0U)
            {
                ctx.WriteRawTag(77);
                ctx.WriteFixed32(Fixed32_1);
            }
            if (Int64_1 != 0L)
            {
                ctx.WriteRawTag(80);
                ctx.WriteInt64(Int64_1);
            }
            if (SInt64_1 != 0L)
            {
                ctx.WriteRawTag(88);
                ctx.WriteSInt64(SInt64_1);
            }
            if (SFixed64_1 != 0L)
            {
                ctx.WriteRawTag(97);
                ctx.WriteSFixed64(SFixed64_1);
            }
            if (UInt64_1 != 0UL)
            {
                ctx.WriteRawTag(104);
                ctx.WriteUInt64(UInt64_1);
            }
            if (Fixed64_1 != 0UL)
            {
                ctx.WriteRawTag(113);
                ctx.WriteFixed64(Fixed64_1);
            }
            if (Float_1 != 0F)
            {
                ctx.WriteRawTag(125);
                ctx.WriteFloat(Float_1);
            }
            if (Double_1 != 0D)
            {
                ctx.WriteRawTag(129, 1);
                ctx.WriteDouble(Double_1);
            }
            if (String_1.Length != 0)
            {
                ctx.WriteRawTag(138, 1);
                ctx.WriteString(String_1);
            }
            if (Bytes_1.Length != 0)
            {
                ctx.WriteRawTag(146, 1);
                ctx.WriteBytes(Bytes_1);
            }
            if (Msg_1 != null)
            {
                ctx.WriteRawTag(154, 1);
                ctx.WriteMessage(Msg_1);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(160, 1);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(168, 1);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(178, 1);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(250, 255, 255, 255, 15);
                ctx.WriteString(Uri_1.ToString());
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                size += 1 + ComputeEnumSize((int)Enum_1);
            }
            if (Bool_1 != false)
            {
                size += 1 + ComputeBoolSize(Bool_1);
            }
            if (Int32_1 != 0)
            {
                size += 1 + ComputeInt32Size(Int32_1);
            }
            if (SInt32_1 != 0)
            {
                size += 1 + ComputeSInt32Size(SInt32_1);
            }
            if (SFixed32_1 != 0)
            {
                size += 1 + ComputeSFixed32Size(SFixed32_1);
            }
            if (UInt32_1 != 0U)
            {
                size += 1 + ComputeUInt32Size(UInt32_1);
            }
            if (Fixed32_1 != 0U)
            {
                size += 1 + ComputeFixed32Size(Fixed32_1);
            }
            if (Int64_1 != 0L)
            {
                size += 1 + ComputeInt64Size(Int64_1);
            }
            if (SInt64_1 != 0L)
            {
                size += 1 + ComputeSInt64Size(SInt64_1);
            }
            if (SFixed64_1 != 0L)
            {
                size += 1 + ComputeSFixed64Size(SFixed64_1);
            }
            if (UInt64_1 != 0UL)
            {
                size += 1 + ComputeUInt64Size(UInt64_1);
            }
            if (Fixed64_1 != 0UL)
            {
                size += 1 + ComputeFixed64Size(Fixed64_1);
            }
            if (Float_1 != 0F)
            {
                size += 1 + ComputeFloatSize(Float_1);
            }
            if (Double_1 != 0D)
            {
                size += 2 + ComputeDoubleSize(Double_1);
            }
            if (String_1.Length != 0)
            {
                size += 2 + ComputeStringSize(String_1);
            }
            if (Bytes_1.Length != 0)
            {
                size += 2 + ComputeBytesSize(Bytes_1);
            }
            if (Msg_1 != null)
            {
                size += 2 + CodedOutputStream.ComputeMessageSize(Msg_1);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 2 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 2 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                size += 2 + ComputeStringSize(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                size += 5 + ComputeStringSize(Uri_1.ToString());
            }
            return size;
        }

        public void MergeFrom(RepeatedData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.Enum_1 != default(SAMPLE_NUMBER))
            {
                Enum_1 = other.Enum_1;
            }
            if (other.Bool_1 != false)
            {
                Bool_1 = other.Bool_1;
            }
            if (other.Int32_1 != 0)
            {
                Int32_1 = other.Int32_1;
            }
            if (other.SInt32_1 != 0)
            {
                SInt32_1 = other.SInt32_1;
            }
            if (other.SFixed32_1 != 0)
            {
                SFixed32_1 = other.SFixed32_1;
            }
            if (other.UInt32_1 != 0U)
            {
                UInt32_1 = other.UInt32_1;
            }
            if (other.Fixed32_1 != 0U)
            {
                Fixed32_1 = other.Fixed32_1;
            }
            if (other.Int64_1 != 0L)
            {
                Int64_1 = other.Int64_1;
            }
            if (other.SInt64_1 != 0L)
            {
                SInt64_1 = other.SInt64_1;
            }
            if (other.SFixed64_1 != 0L)
            {
                SFixed64_1 = other.SFixed64_1;
            }
            if (other.UInt64_1 != 0UL)
            {
                UInt64_1 = other.UInt64_1;
            }
            if (other.Fixed64_1 != 0UL)
            {
                Fixed64_1 = other.Fixed64_1;
            }
            if (other.Float_1 != 0F)
            {
                Float_1 = other.Float_1;
            }
            if (other.Double_1 != 0D)
            {
                Double_1 = other.Double_1;
            }
            if (other.String_1.Length != 0)
            {
                String_1 = other.String_1;
            }
            if (other.Bytes_1.Length != 0)
            {
                Bytes_1 = other.Bytes_1;
            }
            if (other.Msg_1 != null)
            {
                if (Msg_1 == null)
                    Msg_1 = new SampleInfo();
                Msg_1.MergeFrom(other.Msg_1);
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 24:
                        Enum_1 = (SAMPLE_NUMBER)ctx.ReadEnum();
                        break;
                    case 32:
                        Bool_1 = ctx.ReadBool();
                        break;
                    case 40:
                        Int32_1 = ctx.ReadInt32();
                        break;
                    case 48:
                        SInt32_1 = ctx.ReadSInt32();
                        break;
                    case 61:
                        SFixed32_1 = ctx.ReadSFixed32();
                        break;
                    case 64:
                        UInt32_1 = ctx.ReadUInt32();
                        break;
                    case 77:
                        Fixed32_1 = ctx.ReadFixed32();
                        break;
                    case 80:
                        Int64_1 = ctx.ReadInt64();
                        break;
                    case 88:
                        SInt64_1 = ctx.ReadSInt64();
                        break;
                    case 97:
                        SFixed64_1 = ctx.ReadSFixed64();
                        break;
                    case 104:
                        UInt64_1 = ctx.ReadUInt64();
                        break;
                    case 113:
                        Fixed64_1 = ctx.ReadFixed64();
                        break;
                    case 125:
                        Float_1 = ctx.ReadFloat();
                        break;
                    case 129:
                        Double_1 = ctx.ReadDouble();
                        break;
                    case 138:
                        String_1 = ctx.ReadString();
                        break;
                    case 146:
                        Bytes_1 = ctx.ReadBytes();
                        break;
                    case 154:
                        if (Msg_1 == null)
                            Msg_1 = new SampleInfo();
                        ctx.ReadMessage(Msg_1);
                        break;
                    case 160:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 168:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 178:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 4294967290:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class RepeatedDataTable : Table, IMessage<RepeatedDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, RepeatedData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, RepeatedData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<RepeatedData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public RepeatedDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<RepeatedData>(Map));
        }

        public RepeatedDataTable(RepeatedDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<RepeatedData>(Map));
        }

        public RepeatedDataTable Clone()
        {
            return new RepeatedDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as RepeatedDataTable);
        }

        public bool Equals(RepeatedDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(RepeatedDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class SampleInfo : Data, IMessage<SampleInfo>, IBufferMessage
    {
        #region Proto.Field
        public int InfoId;
        public string InfoIdAlias = "";
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Guid Guid_1 = Guid.Empty;
        public Uri Uri_1;
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleInfo()
        {
        }

        public SampleInfo(SampleInfo other) : this()
        {
            InfoId = other.InfoId;
            InfoIdAlias = other.InfoIdAlias;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Guid_1 = other.Guid_1;
            Uri_1 = other.Uri_1;
        }

        public SampleInfo Clone()
        {
            return new SampleInfo(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleInfo);
        }

        public bool Equals(SampleInfo other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (InfoId != other.InfoId) return false;
            if (InfoIdAlias != other.InfoIdAlias) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (InfoId != 0) hash ^= InfoId.GetHashCode();
            if (InfoIdAlias.Length != 0) hash ^= InfoIdAlias.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (InfoId != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(InfoId);
            }
            if (InfoIdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(InfoIdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(24);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(32);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(42);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(50);
                ctx.WriteString(Uri_1.ToString());
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (InfoId != 0)
            {
                size += 1 + ComputeSFixed32Size(InfoId);
            }
            if (InfoIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(InfoIdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 1 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 1 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                size += 1 + ComputeStringSize(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                size += 1 + ComputeStringSize(Uri_1.ToString());
            }
            return size;
        }

        public void MergeFrom(SampleInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InfoId != 0)
            {
                InfoId = other.InfoId;
            }
            if (other.InfoIdAlias.Length != 0)
            {
                InfoIdAlias = other.InfoIdAlias;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        InfoId = ctx.ReadSFixed32();
                        break;
                    case 18:
                        InfoIdAlias = ctx.ReadString();
                        break;
                    case 24:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 32:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 42:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 50:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public enum SAMPLE_NUMBER
    {
        N01_000 = 0,
        N01_001 = 1,
        N01_002 = 2,
        N01_003 = 3,
        N01_004 = 4,
        N01_005 = 5,
        N01_006 = 6,
        N01_007 = 7,
        N01_008 = 8,
        N01_009 = 9,
        N01_010 = 10,
    }

}
#nullable restore
#endregion

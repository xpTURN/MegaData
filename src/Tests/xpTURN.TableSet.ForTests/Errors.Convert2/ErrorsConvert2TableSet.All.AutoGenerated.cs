// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Tests.Errors.Convert2.ErrorsConvert2TableSet;

namespace Tests.Errors.Convert2
{
    public partial class ClassData : Data, IMessage<ClassData>, IBufferMessage
    {
        #region Proto.Field
        public string Class = "";
        public string Grade = "";
        public string Unit = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public ClassData()
        {
        }

        public ClassData(ClassData other) : this()
        {
            Class = other.Class;
            Grade = other.Grade;
            Unit = other.Unit;
        }

        public ClassData Clone()
        {
            return new ClassData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ClassData);
        }

        public bool Equals(ClassData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Class != other.Class) return false;
            if (Grade != other.Grade) return false;
            if (Unit != other.Unit) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Class.Length != 0) hash ^= Class.GetHashCode();
            if (Grade.Length != 0) hash ^= Grade.GetHashCode();
            if (Unit.Length != 0) hash ^= Unit.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Class.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Class);
            }
            if (Grade.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(Grade);
            }
            if (Unit.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Unit);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Class.Length != 0)
            {
                size += 1 + ComputeStringSize(Class);
            }
            if (Grade.Length != 0)
            {
                size += 1 + ComputeStringSize(Grade);
            }
            if (Unit.Length != 0)
            {
                size += 1 + ComputeStringSize(Unit);
            }
            return size;
        }

        public void MergeFrom(ClassData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Class.Length != 0)
            {
                Class = other.Class;
            }
            if (other.Grade.Length != 0)
            {
                Grade = other.Grade;
            }
            if (other.Unit.Length != 0)
            {
                Unit = other.Unit;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Class = ctx.ReadString();
                        break;
                    case 18:
                        Grade = ctx.ReadString();
                        break;
                    case 26:
                        Unit = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class DepthDataTable : Table, IMessage<DepthDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, FirstData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, FirstData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<FirstData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public DepthDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<FirstData>(Map));
        }

        public DepthDataTable(DepthDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<FirstData>(Map));
        }

        public DepthDataTable Clone()
        {
            return new DepthDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as DepthDataTable);
        }

        public bool Equals(DepthDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(DepthDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class FirstData : Data, IMessage<FirstData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public NameCard F1Data = null;
        public ClassData F2Data = null;
        public Dictionary<int, SecondData> SecondMap = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, SecondData> _secondMap_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SecondData>.MessageCodec, 42, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public FirstData()
        {
        }

        public FirstData(FirstData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            if (other.F1Data != null) F1Data = other.F1Data.Clone();
            if (other.F2Data != null) F2Data = other.F2Data.Clone();
            SecondMap = _secondMap_codec.Clone(other.SecondMap);
        }

        public FirstData Clone()
        {
            return new FirstData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as FirstData);
        }

        public bool Equals(FirstData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!object.Equals(F1Data, other.F1Data)) return false;
            if (!object.Equals(F2Data, other.F2Data)) return false;
            if (!_secondMap_codec.AreEqual(SecondMap, other.SecondMap)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (F1Data != null) hash ^= F1Data.GetHashCode();
            if (F2Data != null) hash ^= F2Data.GetHashCode();
            hash ^= _secondMap_codec.GetHashCode(SecondMap);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (F1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(F1Data);
            }
            if (F2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(F2Data);
            }
            _secondMap_codec.WriteTo(ref ctx, ref SecondMap);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (F1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F1Data);
            }
            if (F2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F2Data);
            }
            size += _secondMap_codec.CalculateSize(SecondMap);
            return size;
        }

        public void MergeFrom(FirstData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.F1Data != null)
            {
                if (F1Data == null)
                    F1Data = new NameCard();
                F1Data.MergeFrom(other.F1Data);
            }
            if (other.F2Data != null)
            {
                if (F2Data == null)
                    F2Data = new ClassData();
                F2Data.MergeFrom(other.F2Data);
            }
            _secondMap_codec.Merge(SecondMap, other.SecondMap);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        if (F1Data == null)
                            F1Data = new NameCard();
                        ctx.ReadMessage(F1Data);
                        break;
                    case 34:
                        if (F2Data == null)
                            F2Data = new ClassData();
                        ctx.ReadMessage(F2Data);
                        break;
                    case 42:
                        _secondMap_codec.Read(ref ctx, ref SecondMap);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class LDepthDataTable : Table, IMessage<LDepthDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, LFirstData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, LFirstData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<LFirstData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public LDepthDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<LFirstData>(Map));
        }

        public LDepthDataTable(LDepthDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<LFirstData>(Map));
        }

        public LDepthDataTable Clone()
        {
            return new LDepthDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as LDepthDataTable);
        }

        public bool Equals(LDepthDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(LDepthDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class LFirstData : Data, IMessage<LFirstData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public NameCard F1Data = null;
        public ClassData F2Data = null;
        public List<LSecondData> SecondList = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public LFirstData()
        {
        }

        public LFirstData(LFirstData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            if (other.F1Data != null) F1Data = other.F1Data.Clone();
            if (other.F2Data != null) F2Data = other.F2Data.Clone();
            SecondList = RepeatedMessage<LSecondData>().Clone(other.SecondList);
        }

        public LFirstData Clone()
        {
            return new LFirstData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as LFirstData);
        }

        public bool Equals(LFirstData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!object.Equals(F1Data, other.F1Data)) return false;
            if (!object.Equals(F2Data, other.F2Data)) return false;
            if (!RepeatedMessage<LSecondData>().AreEqual(SecondList, other.SecondList)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (F1Data != null) hash ^= F1Data.GetHashCode();
            if (F2Data != null) hash ^= F2Data.GetHashCode();
            hash ^= RepeatedMessage<LSecondData>().GetHashCode(SecondList);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (F1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(F1Data);
            }
            if (F2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(F2Data);
            }
            RepeatedMessage<LSecondData>().Write(ref ctx, ref SecondList, 42);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (F1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F1Data);
            }
            if (F2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F2Data);
            }
            size += RepeatedMessage<LSecondData>().CalculateSize(SecondList, 42);
            return size;
        }

        public void MergeFrom(LFirstData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.F1Data != null)
            {
                if (F1Data == null)
                    F1Data = new NameCard();
                F1Data.MergeFrom(other.F1Data);
            }
            if (other.F2Data != null)
            {
                if (F2Data == null)
                    F2Data = new ClassData();
                F2Data.MergeFrom(other.F2Data);
            }
            SecondList.AddRange(other.SecondList);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        if (F1Data == null)
                            F1Data = new NameCard();
                        ctx.ReadMessage(F1Data);
                        break;
                    case 34:
                        if (F2Data == null)
                            F2Data = new ClassData();
                        ctx.ReadMessage(F2Data);
                        break;
                    case 42:
                        RepeatedMessage<LSecondData>().Read(ref ctx, ref SecondList, 42);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class LSecondData : Data, IMessage<LSecondData>, IBufferMessage
    {
        #region Proto.Field
        public string Second1 = "";
        public string Second2 = "";
        public NameCard S1Data = null;
        public ClassData S2Data = null;
        public List<LThirdData> ThirdList = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public LSecondData()
        {
        }

        public LSecondData(LSecondData other) : this()
        {
            Second1 = other.Second1;
            Second2 = other.Second2;
            if (other.S1Data != null) S1Data = other.S1Data.Clone();
            if (other.S2Data != null) S2Data = other.S2Data.Clone();
            ThirdList = RepeatedMessage<LThirdData>().Clone(other.ThirdList);
        }

        public LSecondData Clone()
        {
            return new LSecondData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as LSecondData);
        }

        public bool Equals(LSecondData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Second1 != other.Second1) return false;
            if (Second2 != other.Second2) return false;
            if (!object.Equals(S1Data, other.S1Data)) return false;
            if (!object.Equals(S2Data, other.S2Data)) return false;
            if (!RepeatedMessage<LThirdData>().AreEqual(ThirdList, other.ThirdList)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Second1.Length != 0) hash ^= Second1.GetHashCode();
            if (Second2.Length != 0) hash ^= Second2.GetHashCode();
            if (S1Data != null) hash ^= S1Data.GetHashCode();
            if (S2Data != null) hash ^= S2Data.GetHashCode();
            hash ^= RepeatedMessage<LThirdData>().GetHashCode(ThirdList);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Second1.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Second1);
            }
            if (Second2.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(Second2);
            }
            if (S1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(S1Data);
            }
            if (S2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(S2Data);
            }
            RepeatedMessage<LThirdData>().Write(ref ctx, ref ThirdList, 42);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Second1.Length != 0)
            {
                size += 1 + ComputeStringSize(Second1);
            }
            if (Second2.Length != 0)
            {
                size += 1 + ComputeStringSize(Second2);
            }
            if (S1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S1Data);
            }
            if (S2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S2Data);
            }
            size += RepeatedMessage<LThirdData>().CalculateSize(ThirdList, 42);
            return size;
        }

        public void MergeFrom(LSecondData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Second1.Length != 0)
            {
                Second1 = other.Second1;
            }
            if (other.Second2.Length != 0)
            {
                Second2 = other.Second2;
            }
            if (other.S1Data != null)
            {
                if (S1Data == null)
                    S1Data = new NameCard();
                S1Data.MergeFrom(other.S1Data);
            }
            if (other.S2Data != null)
            {
                if (S2Data == null)
                    S2Data = new ClassData();
                S2Data.MergeFrom(other.S2Data);
            }
            ThirdList.AddRange(other.ThirdList);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Second1 = ctx.ReadString();
                        break;
                    case 18:
                        Second2 = ctx.ReadString();
                        break;
                    case 26:
                        if (S1Data == null)
                            S1Data = new NameCard();
                        ctx.ReadMessage(S1Data);
                        break;
                    case 34:
                        if (S2Data == null)
                            S2Data = new ClassData();
                        ctx.ReadMessage(S2Data);
                        break;
                    case 42:
                        RepeatedMessage<LThirdData>().Read(ref ctx, ref ThirdList, 42);
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class LThirdData : Data, IMessage<LThirdData>, IBufferMessage
    {
        #region Proto.Field
        public string Third1 = "";
        public string Third2 = "";
        public NameCard T1Data = null;
        public ClassData T2Data = null;
        #endregion

        #region xpTURN.Protobuf.Method
        public LThirdData()
        {
        }

        public LThirdData(LThirdData other) : this()
        {
            Third1 = other.Third1;
            Third2 = other.Third2;
            if (other.T1Data != null) T1Data = other.T1Data.Clone();
            if (other.T2Data != null) T2Data = other.T2Data.Clone();
        }

        public LThirdData Clone()
        {
            return new LThirdData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as LThirdData);
        }

        public bool Equals(LThirdData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Third1 != other.Third1) return false;
            if (Third2 != other.Third2) return false;
            if (!object.Equals(T1Data, other.T1Data)) return false;
            if (!object.Equals(T2Data, other.T2Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Third1.Length != 0) hash ^= Third1.GetHashCode();
            if (Third2.Length != 0) hash ^= Third2.GetHashCode();
            if (T1Data != null) hash ^= T1Data.GetHashCode();
            if (T2Data != null) hash ^= T2Data.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Third1.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Third1);
            }
            if (Third2.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(Third2);
            }
            if (T1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(T1Data);
            }
            if (T2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(T2Data);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Third1.Length != 0)
            {
                size += 1 + ComputeStringSize(Third1);
            }
            if (Third2.Length != 0)
            {
                size += 1 + ComputeStringSize(Third2);
            }
            if (T1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T1Data);
            }
            if (T2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T2Data);
            }
            return size;
        }

        public void MergeFrom(LThirdData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Third1.Length != 0)
            {
                Third1 = other.Third1;
            }
            if (other.Third2.Length != 0)
            {
                Third2 = other.Third2;
            }
            if (other.T1Data != null)
            {
                if (T1Data == null)
                    T1Data = new NameCard();
                T1Data.MergeFrom(other.T1Data);
            }
            if (other.T2Data != null)
            {
                if (T2Data == null)
                    T2Data = new ClassData();
                T2Data.MergeFrom(other.T2Data);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Third1 = ctx.ReadString();
                        break;
                    case 18:
                        Third2 = ctx.ReadString();
                        break;
                    case 26:
                        if (T1Data == null)
                            T1Data = new NameCard();
                        ctx.ReadMessage(T1Data);
                        break;
                    case 34:
                        if (T2Data == null)
                            T2Data = new ClassData();
                        ctx.ReadMessage(T2Data);
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class NameCard : Data, IMessage<NameCard>, IBufferMessage
    {
        #region Proto.Field
        public string Name = "";
        public int Number;
        public string Location = "";
        public ClassData N1Class = null;
        public List<ClassData> List = new ();
        public Dictionary<long, ClassData> Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<long, ClassData> _map_codec
            = new (xpFieldHelper.SFixed64Codec, xpFieldCodecForMessage<ClassData>.MessageCodec, 50, 9, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NameCard()
        {
        }

        public NameCard(NameCard other) : this()
        {
            Name = other.Name;
            Number = other.Number;
            Location = other.Location;
            if (other.N1Class != null) N1Class = other.N1Class.Clone();
            List = RepeatedMessage<ClassData>().Clone(other.List);
            Map = _map_codec.Clone(other.Map);
        }

        public NameCard Clone()
        {
            return new NameCard(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NameCard);
        }

        public bool Equals(NameCard other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Name != other.Name) return false;
            if (Number != other.Number) return false;
            if (Location != other.Location) return false;
            if (!object.Equals(N1Class, other.N1Class)) return false;
            if (!RepeatedMessage<ClassData>().AreEqual(List, other.List)) return false;
            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Name.Length != 0) hash ^= Name.GetHashCode();
            if (Number != 0) hash ^= Number.GetHashCode();
            if (Location.Length != 0) hash ^= Location.GetHashCode();
            if (N1Class != null) hash ^= N1Class.GetHashCode();
            hash ^= RepeatedMessage<ClassData>().GetHashCode(List);
            hash ^= _map_codec.GetHashCode(Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Name.Length != 0)
            {
                ctx.WriteRawTag(10);
                ctx.WriteString(Name);
            }
            if (Number != 0)
            {
                ctx.WriteRawTag(16);
                ctx.WriteInt32(Number);
            }
            if (Location.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Location);
            }
            if (N1Class != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(N1Class);
            }
            RepeatedMessage<ClassData>().Write(ref ctx, ref List, 42);
            _map_codec.WriteTo(ref ctx, ref Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Name.Length != 0)
            {
                size += 1 + ComputeStringSize(Name);
            }
            if (Number != 0)
            {
                size += 1 + ComputeInt32Size(Number);
            }
            if (Location.Length != 0)
            {
                size += 1 + ComputeStringSize(Location);
            }
            if (N1Class != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(N1Class);
            }
            size += RepeatedMessage<ClassData>().CalculateSize(List, 42);
            size += _map_codec.CalculateSize(Map);
            return size;
        }

        public void MergeFrom(NameCard other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Name.Length != 0)
            {
                Name = other.Name;
            }
            if (other.Number != 0)
            {
                Number = other.Number;
            }
            if (other.Location.Length != 0)
            {
                Location = other.Location;
            }
            if (other.N1Class != null)
            {
                if (N1Class == null)
                    N1Class = new ClassData();
                N1Class.MergeFrom(other.N1Class);
            }
            List.AddRange(other.List);
            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        Name = ctx.ReadString();
                        break;
                    case 16:
                        Number = ctx.ReadInt32();
                        break;
                    case 26:
                        Location = ctx.ReadString();
                        break;
                    case 34:
                        if (N1Class == null)
                            N1Class = new ClassData();
                        ctx.ReadMessage(N1Class);
                        break;
                    case 42:
                        RepeatedMessage<ClassData>().Read(ref ctx, ref List, 42);
                        break;
                    case 50:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public partial class NonDepthDataTable : Table, IMessage<NonDepthDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, NonFirstData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, NonFirstData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<NonFirstData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NonDepthDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<NonFirstData>(Map));
        }

        public NonDepthDataTable(NonDepthDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<NonFirstData>(Map));
        }

        public NonDepthDataTable Clone()
        {
            return new NonDepthDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NonDepthDataTable);
        }

        public bool Equals(NonDepthDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(NonDepthDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class NonFirstData : Data, IMessage<NonFirstData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public NameCard F1Data = null;
        public ClassData F2Data = null;
        #endregion

        #region xpTURN.Protobuf.Method
        public NonFirstData()
        {
        }

        public NonFirstData(NonFirstData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            if (other.F1Data != null) F1Data = other.F1Data.Clone();
            if (other.F2Data != null) F2Data = other.F2Data.Clone();
        }

        public NonFirstData Clone()
        {
            return new NonFirstData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NonFirstData);
        }

        public bool Equals(NonFirstData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!object.Equals(F1Data, other.F1Data)) return false;
            if (!object.Equals(F2Data, other.F2Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (F1Data != null) hash ^= F1Data.GetHashCode();
            if (F2Data != null) hash ^= F2Data.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (F1Data != null)
            {
                ctx.WriteRawTag(26);
                ctx.WriteMessage(F1Data);
            }
            if (F2Data != null)
            {
                ctx.WriteRawTag(34);
                ctx.WriteMessage(F2Data);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (F1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F1Data);
            }
            if (F2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(F2Data);
            }
            return size;
        }

        public void MergeFrom(NonFirstData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.F1Data != null)
            {
                if (F1Data == null)
                    F1Data = new NameCard();
                F1Data.MergeFrom(other.F1Data);
            }
            if (other.F2Data != null)
            {
                if (F2Data == null)
                    F2Data = new ClassData();
                F2Data.MergeFrom(other.F2Data);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        if (F1Data == null)
                            F1Data = new NameCard();
                        ctx.ReadMessage(F1Data);
                        break;
                    case 34:
                        if (F2Data == null)
                            F2Data = new ClassData();
                        ctx.ReadMessage(F2Data);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class SecondData : Data, IMessage<SecondData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public string Second1 = "";
        public string Second2 = "";
        public NameCard S1Data = null;
        public ClassData S2Data = null;
        public Dictionary<int, ThirdData> Third1Map = new ();
        public Dictionary<int, ThirdData> Third2Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, ThirdData> _third1Map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<ThirdData>.MessageCodec, 58, 13, 18);
        protected static readonly xpMapCodec<int, ThirdData> _third2Map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<ThirdData>.MessageCodec, 66, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public SecondData()
        {
        }

        public SecondData(SecondData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Second1 = other.Second1;
            Second2 = other.Second2;
            if (other.S1Data != null) S1Data = other.S1Data.Clone();
            if (other.S2Data != null) S2Data = other.S2Data.Clone();
            Third1Map = _third1Map_codec.Clone(other.Third1Map);
            Third2Map = _third2Map_codec.Clone(other.Third2Map);
        }

        public SecondData Clone()
        {
            return new SecondData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SecondData);
        }

        public bool Equals(SecondData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (Second1 != other.Second1) return false;
            if (Second2 != other.Second2) return false;
            if (!object.Equals(S1Data, other.S1Data)) return false;
            if (!object.Equals(S2Data, other.S2Data)) return false;
            if (!_third1Map_codec.AreEqual(Third1Map, other.Third1Map)) return false;
            if (!_third2Map_codec.AreEqual(Third2Map, other.Third2Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (Second1.Length != 0) hash ^= Second1.GetHashCode();
            if (Second2.Length != 0) hash ^= Second2.GetHashCode();
            if (S1Data != null) hash ^= S1Data.GetHashCode();
            if (S2Data != null) hash ^= S2Data.GetHashCode();
            hash ^= _third1Map_codec.GetHashCode(Third1Map);
            hash ^= _third2Map_codec.GetHashCode(Third2Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (Second1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Second1);
            }
            if (Second2.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(Second2);
            }
            if (S1Data != null)
            {
                ctx.WriteRawTag(42);
                ctx.WriteMessage(S1Data);
            }
            if (S2Data != null)
            {
                ctx.WriteRawTag(50);
                ctx.WriteMessage(S2Data);
            }
            _third1Map_codec.WriteTo(ref ctx, ref Third1Map);
            _third2Map_codec.WriteTo(ref ctx, ref Third2Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (Second1.Length != 0)
            {
                size += 1 + ComputeStringSize(Second1);
            }
            if (Second2.Length != 0)
            {
                size += 1 + ComputeStringSize(Second2);
            }
            if (S1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S1Data);
            }
            if (S2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(S2Data);
            }
            size += _third1Map_codec.CalculateSize(Third1Map);
            size += _third2Map_codec.CalculateSize(Third2Map);
            return size;
        }

        public void MergeFrom(SecondData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.Second1.Length != 0)
            {
                Second1 = other.Second1;
            }
            if (other.Second2.Length != 0)
            {
                Second2 = other.Second2;
            }
            if (other.S1Data != null)
            {
                if (S1Data == null)
                    S1Data = new NameCard();
                S1Data.MergeFrom(other.S1Data);
            }
            if (other.S2Data != null)
            {
                if (S2Data == null)
                    S2Data = new ClassData();
                S2Data.MergeFrom(other.S2Data);
            }
            _third1Map_codec.Merge(Third1Map, other.Third1Map);
            _third2Map_codec.Merge(Third2Map, other.Third2Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        Second1 = ctx.ReadString();
                        break;
                    case 34:
                        Second2 = ctx.ReadString();
                        break;
                    case 42:
                        if (S1Data == null)
                            S1Data = new NameCard();
                        ctx.ReadMessage(S1Data);
                        break;
                    case 50:
                        if (S2Data == null)
                            S2Data = new ClassData();
                        ctx.ReadMessage(S2Data);
                        break;
                    case 58:
                        _third1Map_codec.Read(ref ctx, ref Third1Map);
                        break;
                    case 66:
                        _third2Map_codec.Read(ref ctx, ref Third2Map);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class ThirdData : Data, IMessage<ThirdData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public string Third1 = "";
        public string Third2 = "";
        public NameCard T1Data = null;
        public ClassData T2Data = null;
        #endregion

        #region xpTURN.Protobuf.Method
        public ThirdData()
        {
        }

        public ThirdData(ThirdData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Third1 = other.Third1;
            Third2 = other.Third2;
            if (other.T1Data != null) T1Data = other.T1Data.Clone();
            if (other.T2Data != null) T2Data = other.T2Data.Clone();
        }

        public ThirdData Clone()
        {
            return new ThirdData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as ThirdData);
        }

        public bool Equals(ThirdData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (Third1 != other.Third1) return false;
            if (Third2 != other.Third2) return false;
            if (!object.Equals(T1Data, other.T1Data)) return false;
            if (!object.Equals(T2Data, other.T2Data)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (Third1.Length != 0) hash ^= Third1.GetHashCode();
            if (Third2.Length != 0) hash ^= Third2.GetHashCode();
            if (T1Data != null) hash ^= T1Data.GetHashCode();
            if (T2Data != null) hash ^= T2Data.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (Third1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Third1);
            }
            if (Third2.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteString(Third2);
            }
            if (T1Data != null)
            {
                ctx.WriteRawTag(42);
                ctx.WriteMessage(T1Data);
            }
            if (T2Data != null)
            {
                ctx.WriteRawTag(50);
                ctx.WriteMessage(T2Data);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (Third1.Length != 0)
            {
                size += 1 + ComputeStringSize(Third1);
            }
            if (Third2.Length != 0)
            {
                size += 1 + ComputeStringSize(Third2);
            }
            if (T1Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T1Data);
            }
            if (T2Data != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(T2Data);
            }
            return size;
        }

        public void MergeFrom(ThirdData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.Third1.Length != 0)
            {
                Third1 = other.Third1;
            }
            if (other.Third2.Length != 0)
            {
                Third2 = other.Third2;
            }
            if (other.T1Data != null)
            {
                if (T1Data == null)
                    T1Data = new NameCard();
                T1Data.MergeFrom(other.T1Data);
            }
            if (other.T2Data != null)
            {
                if (T2Data == null)
                    T2Data = new ClassData();
                T2Data.MergeFrom(other.T2Data);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        Third1 = ctx.ReadString();
                        break;
                    case 34:
                        Third2 = ctx.ReadString();
                        break;
                    case 42:
                        if (T1Data == null)
                            T1Data = new NameCard();
                        ctx.ReadMessage(T1Data);
                        break;
                    case 50:
                        if (T2Data == null)
                            T2Data = new ClassData();
                        ctx.ReadMessage(T2Data);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

}
#nullable restore
#endregion

// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Tests.WeakRef.Type1.WeakRef1TableSet;

namespace Tests.WeakRef.Type1
{
    public partial class NumberData : Data, IMessage<NumberData>, IBufferMessage
    {
        #region Proto.Field
        public NumberType Id;
        public int Value;
        #endregion

        #region xpTURN.Protobuf.Method
        public NumberData()
        {
        }

        public NumberData(NumberData other) : this()
        {
            Id = other.Id;
            Value = other.Value;
        }

        public NumberData Clone()
        {
            return new NumberData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumberData);
        }

        public bool Equals(NumberData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (Value != other.Value) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != default(NumberType)) hash ^= Id.GetHashCode();
            if (Value != 0) hash ^= Value.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != default(NumberType))
            {
                ctx.WriteRawTag(8);
                ctx.WriteEnum((int)Id);
            }
            if (Value != 0)
            {
                ctx.WriteRawTag(16);
                ctx.WriteInt32(Value);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != default(NumberType))
            {
                size += 1 + ComputeEnumSize((int)Id);
            }
            if (Value != 0)
            {
                size += 1 + ComputeInt32Size(Value);
            }
            return size;
        }

        public void MergeFrom(NumberData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != default(NumberType))
            {
                Id = other.Id;
            }
            if (other.Value != 0)
            {
                Value = other.Value;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = (NumberType)ctx.ReadEnum();
                        break;
                    case 16:
                        Value = ctx.ReadInt32();
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => (int)Id;
        #endregion
    }

    public partial class NumberDataTable : Table, IMessage<NumberDataTable>, IBufferMessage
    {
        #region Proto.Field
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<NumberType, NumberData> _map_codec
            = new (xpFieldCodecForEnum<NumberType>.EnumCodec, xpFieldCodecForMessage<NumberData>.MessageCodec, 10, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NumberDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumberType, NumberData>(Map), Instance.EnableWeakRef);
        }

        public NumberDataTable(NumberDataTable other) : this()
        {
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumberType, NumberData>(Map), Instance.EnableWeakRef);
        }

        public NumberDataTable Clone()
        {
            return new NumberDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumberDataTable);
        }

        public bool Equals(NumberDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(NumberDataTable other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }

            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        protected Dictionary<NumberType, NumberData> Map { get; } = new ();
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class NumbersData : Data, IMessage<NumbersData>, IBufferMessage
    {
        #region Proto.Field
        public NumbersType Id;
        public List<int> Value = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public NumbersData()
        {
        }

        public NumbersData(NumbersData other) : this()
        {
            Id = other.Id;
            Value = RepeatedSFixed32().Clone(other.Value);
        }

        public NumbersData Clone()
        {
            return new NumbersData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumbersData);
        }

        public bool Equals(NumbersData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (!RepeatedSFixed32().AreEqual(Value, other.Value)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != default(NumbersType)) hash ^= Id.GetHashCode();
            hash ^= RepeatedSFixed32().GetHashCode(Value);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != default(NumbersType))
            {
                ctx.WriteRawTag(8);
                ctx.WriteEnum((int)Id);
            }
            RepeatedSFixed32().Write(ref ctx, ref Value, 18);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != default(NumbersType))
            {
                size += 1 + ComputeEnumSize((int)Id);
            }
            size += RepeatedSFixed32().CalculateSize(Value, 18);
            return size;
        }

        public void MergeFrom(NumbersData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != default(NumbersType))
            {
                Id = other.Id;
            }
            Value.AddRange(other.Value);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 8:
                        Id = (NumbersType)ctx.ReadEnum();
                        break;
                    case 18:
                    case 21:
                        RepeatedSFixed32().Read(ref ctx, ref Value, 18);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => (int)Id;
        #endregion
    }

    public partial class NumbersDataTable : Table, IMessage<NumbersDataTable>, IBufferMessage
    {
        #region Proto.Field
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<NumbersType, NumbersData> _map_codec
            = new (xpFieldCodecForEnum<NumbersType>.EnumCodec, xpFieldCodecForMessage<NumbersData>.MessageCodec, 10, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public NumbersDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumbersType, NumbersData>(Map), Instance.EnableWeakRef);
        }

        public NumbersDataTable(NumbersDataTable other) : this()
        {
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapEnumWrapper<NumbersType, NumbersData>(Map), Instance.EnableWeakRef);
        }

        public NumbersDataTable Clone()
        {
            return new NumbersDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as NumbersDataTable);
        }

        public bool Equals(NumbersDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(NumbersDataTable other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }

            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        protected Dictionary<NumbersType, NumbersData> Map { get; } = new ();
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class SampleData : Data, IMessage<SampleData>, IBufferMessage
    {
        #region Proto.Field
        public int SampleId;
        public string SampleIdAlias = "";
        public string Alias_1 = "";
        public ByteString Bytes_1 = ByteString.Empty;
        public int Int32_1;
        public long Int64_1;
        public uint UInt32_1;
        public ulong UInt64_1;
        public int SInt32_1;
        public long SInt64_1;
        public uint Fixed32_1;
        public ulong Fixed64_1;
        public int SFixed32_1;
        public long SFixed64_1;
        public double Double_1;
        public float Float_1;
        public bool Boolean_1;
        public SAMPLE_NUMBER Enum_1;
        public List<string> ListTextAlias_2 = new ();
        public List<ByteString> ListBytes_2 = new ();
        public List<int> ListInt32_2 = new ();
        public List<long> ListInt64_2 = new ();
        public List<uint> ListUInt32_2 = new ();
        public List<ulong> ListUInt64_2 = new ();
        public List<int> ListSInt32_2 = new ();
        public List<long> ListSInt64_2 = new ();
        public List<uint> ListFixed32_2 = new ();
        public List<ulong> ListFixed64_2 = new ();
        public List<int> ListSFixed32_2 = new ();
        public List<long> ListSFixed64_2 = new ();
        public List<double> ListDouble_2 = new ();
        public List<float> ListFloat_2 = new ();
        public List<bool> ListBoolean_2 = new ();
        public List<SAMPLE_NUMBER> ListEnum_2 = new ();
        public float Float_3;
        public bool Boolean_3;
        public SAMPLE_NUMBER Enum_3;
        public Dictionary<int, SampleInfo> MapInfo_4 = new ();
        public Dictionary<int, string> MapInfo_5 = new ();
        public SampleInfo SampleInfo_4 = null;
        public ByteString Bytes_4 = ByteString.Empty;
        public List<ByteString> ListBytes_4 = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, SampleInfo> _mapInfo_4_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SampleInfo>.MessageCodec, 298, 13, 18);
        protected static readonly xpMapCodec<int, string> _mapInfo_5_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldHelper.StringCodec, 306, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleData()
        {
        }

        public SampleData(SampleData other) : this()
        {
            SampleId = other.SampleId;
            SampleIdAlias = other.SampleIdAlias;
            Alias_1 = other.Alias_1;
            Bytes_1 = other.Bytes_1;
            Int32_1 = other.Int32_1;
            Int64_1 = other.Int64_1;
            UInt32_1 = other.UInt32_1;
            UInt64_1 = other.UInt64_1;
            SInt32_1 = other.SInt32_1;
            SInt64_1 = other.SInt64_1;
            Fixed32_1 = other.Fixed32_1;
            Fixed64_1 = other.Fixed64_1;
            SFixed32_1 = other.SFixed32_1;
            SFixed64_1 = other.SFixed64_1;
            Double_1 = other.Double_1;
            Float_1 = other.Float_1;
            Boolean_1 = other.Boolean_1;
            Enum_1 = other.Enum_1;
            ListTextAlias_2 = RepeatedString().Clone(other.ListTextAlias_2);
            ListBytes_2 = RepeatedBytes().Clone(other.ListBytes_2);
            ListInt32_2 = RepeatedInt32().Clone(other.ListInt32_2);
            ListInt64_2 = RepeatedInt64().Clone(other.ListInt64_2);
            ListUInt32_2 = RepeatedUInt32().Clone(other.ListUInt32_2);
            ListUInt64_2 = RepeatedUInt64().Clone(other.ListUInt64_2);
            ListSInt32_2 = RepeatedSInt32().Clone(other.ListSInt32_2);
            ListSInt64_2 = RepeatedSInt64().Clone(other.ListSInt64_2);
            ListFixed32_2 = RepeatedFixed32().Clone(other.ListFixed32_2);
            ListFixed64_2 = RepeatedFixed64().Clone(other.ListFixed64_2);
            ListSFixed32_2 = RepeatedSFixed32().Clone(other.ListSFixed32_2);
            ListSFixed64_2 = RepeatedSFixed64().Clone(other.ListSFixed64_2);
            ListDouble_2 = RepeatedDouble().Clone(other.ListDouble_2);
            ListFloat_2 = RepeatedFloat().Clone(other.ListFloat_2);
            ListBoolean_2 = RepeatedBool().Clone(other.ListBoolean_2);
            ListEnum_2 = RepeatedEnum<SAMPLE_NUMBER>().Clone(other.ListEnum_2);
            Float_3 = other.Float_3;
            Boolean_3 = other.Boolean_3;
            Enum_3 = other.Enum_3;
            MapInfo_4 = _mapInfo_4_codec.Clone(other.MapInfo_4);
            MapInfo_5 = _mapInfo_5_codec.Clone(other.MapInfo_5);
            if (other.SampleInfo_4 != null) SampleInfo_4 = other.SampleInfo_4.Clone();
            Bytes_4 = other.Bytes_4;
            ListBytes_4 = RepeatedBytes().Clone(other.ListBytes_4);
        }

        public SampleData Clone()
        {
            return new SampleData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleData);
        }

        public bool Equals(SampleData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (SampleId != other.SampleId) return false;
            if (SampleIdAlias != other.SampleIdAlias) return false;
            if (Alias_1 != other.Alias_1) return false;
            if (Bytes_1 != other.Bytes_1) return false;
            if (Int32_1 != other.Int32_1) return false;
            if (Int64_1 != other.Int64_1) return false;
            if (UInt32_1 != other.UInt32_1) return false;
            if (UInt64_1 != other.UInt64_1) return false;
            if (SInt32_1 != other.SInt32_1) return false;
            if (SInt64_1 != other.SInt64_1) return false;
            if (Fixed32_1 != other.Fixed32_1) return false;
            if (Fixed64_1 != other.Fixed64_1) return false;
            if (SFixed32_1 != other.SFixed32_1) return false;
            if (SFixed64_1 != other.SFixed64_1) return false;
            if (!BitwiseDoubleEqualityComparer.Equals(Double_1, other.Double_1)) return false;
            if (!BitwiseSingleEqualityComparer.Equals(Float_1, other.Float_1)) return false;
            if (Boolean_1 != other.Boolean_1) return false;
            if (Enum_1 != other.Enum_1) return false;
            if (!RepeatedString().AreEqual(ListTextAlias_2, other.ListTextAlias_2)) return false;
            if (!RepeatedBytes().AreEqual(ListBytes_2, other.ListBytes_2)) return false;
            if (!RepeatedInt32().AreEqual(ListInt32_2, other.ListInt32_2)) return false;
            if (!RepeatedInt64().AreEqual(ListInt64_2, other.ListInt64_2)) return false;
            if (!RepeatedUInt32().AreEqual(ListUInt32_2, other.ListUInt32_2)) return false;
            if (!RepeatedUInt64().AreEqual(ListUInt64_2, other.ListUInt64_2)) return false;
            if (!RepeatedSInt32().AreEqual(ListSInt32_2, other.ListSInt32_2)) return false;
            if (!RepeatedSInt64().AreEqual(ListSInt64_2, other.ListSInt64_2)) return false;
            if (!RepeatedFixed32().AreEqual(ListFixed32_2, other.ListFixed32_2)) return false;
            if (!RepeatedFixed64().AreEqual(ListFixed64_2, other.ListFixed64_2)) return false;
            if (!RepeatedSFixed32().AreEqual(ListSFixed32_2, other.ListSFixed32_2)) return false;
            if (!RepeatedSFixed64().AreEqual(ListSFixed64_2, other.ListSFixed64_2)) return false;
            if (!RepeatedDouble().AreEqual(ListDouble_2, other.ListDouble_2)) return false;
            if (!RepeatedFloat().AreEqual(ListFloat_2, other.ListFloat_2)) return false;
            if (!RepeatedBool().AreEqual(ListBoolean_2, other.ListBoolean_2)) return false;
            if (!RepeatedEnum<SAMPLE_NUMBER>().AreEqual(ListEnum_2, other.ListEnum_2)) return false;
            if (!BitwiseSingleEqualityComparer.Equals(Float_3, other.Float_3)) return false;
            if (Boolean_3 != other.Boolean_3) return false;
            if (Enum_3 != other.Enum_3) return false;
            if (!_mapInfo_4_codec.AreEqual(MapInfo_4, other.MapInfo_4)) return false;
            if (!_mapInfo_5_codec.AreEqual(MapInfo_5, other.MapInfo_5)) return false;
            if (!object.Equals(SampleInfo_4, other.SampleInfo_4)) return false;
            if (Bytes_4 != other.Bytes_4) return false;
            if (!RepeatedBytes().AreEqual(ListBytes_4, other.ListBytes_4)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (SampleId != 0) hash ^= SampleId.GetHashCode();
            if (SampleIdAlias.Length != 0) hash ^= SampleIdAlias.GetHashCode();
            if (Alias_1.Length != 0) hash ^= Alias_1.GetHashCode();
            if (Bytes_1.Length != 0) hash ^= Bytes_1.GetHashCode();
            if (Int32_1 != 0) hash ^= Int32_1.GetHashCode();
            if (Int64_1 != 0L) hash ^= Int64_1.GetHashCode();
            if (UInt32_1 != 0U) hash ^= UInt32_1.GetHashCode();
            if (UInt64_1 != 0UL) hash ^= UInt64_1.GetHashCode();
            if (SInt32_1 != 0) hash ^= SInt32_1.GetHashCode();
            if (SInt64_1 != 0L) hash ^= SInt64_1.GetHashCode();
            if (Fixed32_1 != 0U) hash ^= Fixed32_1.GetHashCode();
            if (Fixed64_1 != 0UL) hash ^= Fixed64_1.GetHashCode();
            if (SFixed32_1 != 0) hash ^= SFixed32_1.GetHashCode();
            if (SFixed64_1 != 0L) hash ^= SFixed64_1.GetHashCode();
            if (Double_1 != 0D) hash ^= BitwiseDoubleEqualityComparer.GetHashCode(Double_1);
            if (Float_1 != 0F) hash ^= BitwiseSingleEqualityComparer.GetHashCode(Float_1);
            if (Boolean_1 != false) hash ^= Boolean_1.GetHashCode();
            if (Enum_1 != default(SAMPLE_NUMBER)) hash ^= Enum_1.GetHashCode();
            hash ^= RepeatedString().GetHashCode(ListTextAlias_2);
            hash ^= RepeatedBytes().GetHashCode(ListBytes_2);
            hash ^= RepeatedInt32().GetHashCode(ListInt32_2);
            hash ^= RepeatedInt64().GetHashCode(ListInt64_2);
            hash ^= RepeatedUInt32().GetHashCode(ListUInt32_2);
            hash ^= RepeatedUInt64().GetHashCode(ListUInt64_2);
            hash ^= RepeatedSInt32().GetHashCode(ListSInt32_2);
            hash ^= RepeatedSInt64().GetHashCode(ListSInt64_2);
            hash ^= RepeatedFixed32().GetHashCode(ListFixed32_2);
            hash ^= RepeatedFixed64().GetHashCode(ListFixed64_2);
            hash ^= RepeatedSFixed32().GetHashCode(ListSFixed32_2);
            hash ^= RepeatedSFixed64().GetHashCode(ListSFixed64_2);
            hash ^= RepeatedDouble().GetHashCode(ListDouble_2);
            hash ^= RepeatedFloat().GetHashCode(ListFloat_2);
            hash ^= RepeatedBool().GetHashCode(ListBoolean_2);
            hash ^= RepeatedEnum<SAMPLE_NUMBER>().GetHashCode(ListEnum_2);
            if (Float_3 != 0F) hash ^= BitwiseSingleEqualityComparer.GetHashCode(Float_3);
            if (Boolean_3 != false) hash ^= Boolean_3.GetHashCode();
            if (Enum_3 != default(SAMPLE_NUMBER)) hash ^= Enum_3.GetHashCode();
            hash ^= _mapInfo_4_codec.GetHashCode(MapInfo_4);
            hash ^= _mapInfo_5_codec.GetHashCode(MapInfo_5);
            if (SampleInfo_4 != null) hash ^= SampleInfo_4.GetHashCode();
            if (Bytes_4.Length != 0) hash ^= Bytes_4.GetHashCode();
            hash ^= RepeatedBytes().GetHashCode(ListBytes_4);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (SampleId != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(SampleId);
            }
            if (SampleIdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(SampleIdAlias);
            }
            if (Alias_1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Alias_1);
            }
            if (Bytes_1.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteBytes(Bytes_1);
            }
            if (Int32_1 != 0)
            {
                ctx.WriteRawTag(40);
                ctx.WriteInt32(Int32_1);
            }
            if (Int64_1 != 0L)
            {
                ctx.WriteRawTag(48);
                ctx.WriteInt64(Int64_1);
            }
            if (UInt32_1 != 0U)
            {
                ctx.WriteRawTag(56);
                ctx.WriteUInt32(UInt32_1);
            }
            if (UInt64_1 != 0UL)
            {
                ctx.WriteRawTag(64);
                ctx.WriteUInt64(UInt64_1);
            }
            if (SInt32_1 != 0)
            {
                ctx.WriteRawTag(72);
                ctx.WriteSInt32(SInt32_1);
            }
            if (SInt64_1 != 0L)
            {
                ctx.WriteRawTag(80);
                ctx.WriteSInt64(SInt64_1);
            }
            if (Fixed32_1 != 0U)
            {
                ctx.WriteRawTag(93);
                ctx.WriteFixed32(Fixed32_1);
            }
            if (Fixed64_1 != 0UL)
            {
                ctx.WriteRawTag(97);
                ctx.WriteFixed64(Fixed64_1);
            }
            if (SFixed32_1 != 0)
            {
                ctx.WriteRawTag(109);
                ctx.WriteSFixed32(SFixed32_1);
            }
            if (SFixed64_1 != 0L)
            {
                ctx.WriteRawTag(113);
                ctx.WriteSFixed64(SFixed64_1);
            }
            if (Double_1 != 0D)
            {
                ctx.WriteRawTag(121);
                ctx.WriteDouble(Double_1);
            }
            if (Float_1 != 0F)
            {
                ctx.WriteRawTag(133, 1);
                ctx.WriteFloat(Float_1);
            }
            if (Boolean_1 != false)
            {
                ctx.WriteRawTag(136, 1);
                ctx.WriteBool(Boolean_1);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                ctx.WriteRawTag(144, 1);
                ctx.WriteEnum((int)Enum_1);
            }
            RepeatedString().Write(ref ctx, ref ListTextAlias_2, 154);
            RepeatedBytes().Write(ref ctx, ref ListBytes_2, 162);
            RepeatedInt32().Write(ref ctx, ref ListInt32_2, 170);
            RepeatedInt64().Write(ref ctx, ref ListInt64_2, 178);
            RepeatedUInt32().Write(ref ctx, ref ListUInt32_2, 186);
            RepeatedUInt64().Write(ref ctx, ref ListUInt64_2, 194);
            RepeatedSInt32().Write(ref ctx, ref ListSInt32_2, 202);
            RepeatedSInt64().Write(ref ctx, ref ListSInt64_2, 210);
            RepeatedFixed32().Write(ref ctx, ref ListFixed32_2, 218);
            RepeatedFixed64().Write(ref ctx, ref ListFixed64_2, 226);
            RepeatedSFixed32().Write(ref ctx, ref ListSFixed32_2, 234);
            RepeatedSFixed64().Write(ref ctx, ref ListSFixed64_2, 242);
            RepeatedDouble().Write(ref ctx, ref ListDouble_2, 250);
            RepeatedFloat().Write(ref ctx, ref ListFloat_2, 258);
            RepeatedBool().Write(ref ctx, ref ListBoolean_2, 266);
            RepeatedEnum<SAMPLE_NUMBER>().Write(ref ctx, ref ListEnum_2, 274);
            if (Float_3 != 0F)
            {
                ctx.WriteRawTag(157, 2);
                ctx.WriteFloat(Float_3);
            }
            if (Boolean_3 != false)
            {
                ctx.WriteRawTag(160, 2);
                ctx.WriteBool(Boolean_3);
            }
            if (Enum_3 != default(SAMPLE_NUMBER))
            {
                ctx.WriteRawTag(248, 255, 255, 255, 15);
                ctx.WriteEnum((int)Enum_3);
            }
            _mapInfo_4_codec.WriteTo(ref ctx, ref MapInfo_4);
            _mapInfo_5_codec.WriteTo(ref ctx, ref MapInfo_5);
            if (SampleInfo_4 != null)
            {
                ctx.WriteRawTag(186, 2);
                ctx.WriteMessage(SampleInfo_4);
            }
            if (Bytes_4.Length != 0)
            {
                ctx.WriteRawTag(194, 2);
                ctx.WriteBytes(Bytes_4);
            }
            RepeatedBytes().Write(ref ctx, ref ListBytes_4, 330);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (SampleId != 0)
            {
                size += 1 + ComputeSFixed32Size(SampleId);
            }
            if (SampleIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(SampleIdAlias);
            }
            if (Alias_1.Length != 0)
            {
                size += 1 + ComputeStringSize(Alias_1);
            }
            if (Bytes_1.Length != 0)
            {
                size += 1 + ComputeBytesSize(Bytes_1);
            }
            if (Int32_1 != 0)
            {
                size += 1 + ComputeInt32Size(Int32_1);
            }
            if (Int64_1 != 0L)
            {
                size += 1 + ComputeInt64Size(Int64_1);
            }
            if (UInt32_1 != 0U)
            {
                size += 1 + ComputeUInt32Size(UInt32_1);
            }
            if (UInt64_1 != 0UL)
            {
                size += 1 + ComputeUInt64Size(UInt64_1);
            }
            if (SInt32_1 != 0)
            {
                size += 1 + ComputeSInt32Size(SInt32_1);
            }
            if (SInt64_1 != 0L)
            {
                size += 1 + ComputeSInt64Size(SInt64_1);
            }
            if (Fixed32_1 != 0U)
            {
                size += 1 + ComputeFixed32Size(Fixed32_1);
            }
            if (Fixed64_1 != 0UL)
            {
                size += 1 + ComputeFixed64Size(Fixed64_1);
            }
            if (SFixed32_1 != 0)
            {
                size += 1 + ComputeSFixed32Size(SFixed32_1);
            }
            if (SFixed64_1 != 0L)
            {
                size += 1 + ComputeSFixed64Size(SFixed64_1);
            }
            if (Double_1 != 0D)
            {
                size += 1 + ComputeDoubleSize(Double_1);
            }
            if (Float_1 != 0F)
            {
                size += 2 + ComputeFloatSize(Float_1);
            }
            if (Boolean_1 != false)
            {
                size += 2 + ComputeBoolSize(Boolean_1);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                size += 2 + ComputeEnumSize((int)Enum_1);
            }
            size += RepeatedString().CalculateSize(ListTextAlias_2, 154);
            size += RepeatedBytes().CalculateSize(ListBytes_2, 162);
            size += RepeatedInt32().CalculateSize(ListInt32_2, 170);
            size += RepeatedInt64().CalculateSize(ListInt64_2, 178);
            size += RepeatedUInt32().CalculateSize(ListUInt32_2, 186);
            size += RepeatedUInt64().CalculateSize(ListUInt64_2, 194);
            size += RepeatedSInt32().CalculateSize(ListSInt32_2, 202);
            size += RepeatedSInt64().CalculateSize(ListSInt64_2, 210);
            size += RepeatedFixed32().CalculateSize(ListFixed32_2, 218);
            size += RepeatedFixed64().CalculateSize(ListFixed64_2, 226);
            size += RepeatedSFixed32().CalculateSize(ListSFixed32_2, 234);
            size += RepeatedSFixed64().CalculateSize(ListSFixed64_2, 242);
            size += RepeatedDouble().CalculateSize(ListDouble_2, 250);
            size += RepeatedFloat().CalculateSize(ListFloat_2, 258);
            size += RepeatedBool().CalculateSize(ListBoolean_2, 266);
            size += RepeatedEnum<SAMPLE_NUMBER>().CalculateSize(ListEnum_2, 274);
            if (Float_3 != 0F)
            {
                size += 2 + ComputeFloatSize(Float_3);
            }
            if (Boolean_3 != false)
            {
                size += 2 + ComputeBoolSize(Boolean_3);
            }
            if (Enum_3 != default(SAMPLE_NUMBER))
            {
                size += 5 + ComputeEnumSize((int)Enum_3);
            }
            size += _mapInfo_4_codec.CalculateSize(MapInfo_4);
            size += _mapInfo_5_codec.CalculateSize(MapInfo_5);
            if (SampleInfo_4 != null)
            {
                size += 2 + CodedOutputStream.ComputeMessageSize(SampleInfo_4);
            }
            if (Bytes_4.Length != 0)
            {
                size += 2 + ComputeBytesSize(Bytes_4);
            }
            size += RepeatedBytes().CalculateSize(ListBytes_4, 330);
            return size;
        }

        public void MergeFrom(SampleData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SampleId != 0)
            {
                SampleId = other.SampleId;
            }
            if (other.SampleIdAlias.Length != 0)
            {
                SampleIdAlias = other.SampleIdAlias;
            }
            if (other.Alias_1.Length != 0)
            {
                Alias_1 = other.Alias_1;
            }
            if (other.Bytes_1.Length != 0)
            {
                Bytes_1 = other.Bytes_1;
            }
            if (other.Int32_1 != 0)
            {
                Int32_1 = other.Int32_1;
            }
            if (other.Int64_1 != 0L)
            {
                Int64_1 = other.Int64_1;
            }
            if (other.UInt32_1 != 0U)
            {
                UInt32_1 = other.UInt32_1;
            }
            if (other.UInt64_1 != 0UL)
            {
                UInt64_1 = other.UInt64_1;
            }
            if (other.SInt32_1 != 0)
            {
                SInt32_1 = other.SInt32_1;
            }
            if (other.SInt64_1 != 0L)
            {
                SInt64_1 = other.SInt64_1;
            }
            if (other.Fixed32_1 != 0U)
            {
                Fixed32_1 = other.Fixed32_1;
            }
            if (other.Fixed64_1 != 0UL)
            {
                Fixed64_1 = other.Fixed64_1;
            }
            if (other.SFixed32_1 != 0)
            {
                SFixed32_1 = other.SFixed32_1;
            }
            if (other.SFixed64_1 != 0L)
            {
                SFixed64_1 = other.SFixed64_1;
            }
            if (other.Double_1 != 0D)
            {
                Double_1 = other.Double_1;
            }
            if (other.Float_1 != 0F)
            {
                Float_1 = other.Float_1;
            }
            if (other.Boolean_1 != false)
            {
                Boolean_1 = other.Boolean_1;
            }
            if (other.Enum_1 != default(SAMPLE_NUMBER))
            {
                Enum_1 = other.Enum_1;
            }
            ListTextAlias_2.AddRange(other.ListTextAlias_2);
            ListBytes_2.AddRange(other.ListBytes_2);
            ListInt32_2.AddRange(other.ListInt32_2);
            ListInt64_2.AddRange(other.ListInt64_2);
            ListUInt32_2.AddRange(other.ListUInt32_2);
            ListUInt64_2.AddRange(other.ListUInt64_2);
            ListSInt32_2.AddRange(other.ListSInt32_2);
            ListSInt64_2.AddRange(other.ListSInt64_2);
            ListFixed32_2.AddRange(other.ListFixed32_2);
            ListFixed64_2.AddRange(other.ListFixed64_2);
            ListSFixed32_2.AddRange(other.ListSFixed32_2);
            ListSFixed64_2.AddRange(other.ListSFixed64_2);
            ListDouble_2.AddRange(other.ListDouble_2);
            ListFloat_2.AddRange(other.ListFloat_2);
            ListBoolean_2.AddRange(other.ListBoolean_2);
            ListEnum_2.AddRange(other.ListEnum_2);
            if (other.Float_3 != 0F)
            {
                Float_3 = other.Float_3;
            }
            if (other.Boolean_3 != false)
            {
                Boolean_3 = other.Boolean_3;
            }
            if (other.Enum_3 != default(SAMPLE_NUMBER))
            {
                Enum_3 = other.Enum_3;
            }
            _mapInfo_4_codec.Merge(MapInfo_4, other.MapInfo_4);
            _mapInfo_5_codec.Merge(MapInfo_5, other.MapInfo_5);
            if (other.SampleInfo_4 != null)
            {
                if (SampleInfo_4 == null)
                    SampleInfo_4 = new SampleInfo();
                SampleInfo_4.MergeFrom(other.SampleInfo_4);
            }
            if (other.Bytes_4.Length != 0)
            {
                Bytes_4 = other.Bytes_4;
            }
            ListBytes_4.AddRange(other.ListBytes_4);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        SampleId = ctx.ReadSFixed32();
                        break;
                    case 18:
                        SampleIdAlias = ctx.ReadString();
                        break;
                    case 26:
                        Alias_1 = ctx.ReadString();
                        break;
                    case 34:
                        Bytes_1 = ctx.ReadBytes();
                        break;
                    case 40:
                        Int32_1 = ctx.ReadInt32();
                        break;
                    case 48:
                        Int64_1 = ctx.ReadInt64();
                        break;
                    case 56:
                        UInt32_1 = ctx.ReadUInt32();
                        break;
                    case 64:
                        UInt64_1 = ctx.ReadUInt64();
                        break;
                    case 72:
                        SInt32_1 = ctx.ReadSInt32();
                        break;
                    case 80:
                        SInt64_1 = ctx.ReadSInt64();
                        break;
                    case 93:
                        Fixed32_1 = ctx.ReadFixed32();
                        break;
                    case 97:
                        Fixed64_1 = ctx.ReadFixed64();
                        break;
                    case 109:
                        SFixed32_1 = ctx.ReadSFixed32();
                        break;
                    case 113:
                        SFixed64_1 = ctx.ReadSFixed64();
                        break;
                    case 121:
                        Double_1 = ctx.ReadDouble();
                        break;
                    case 133:
                        Float_1 = ctx.ReadFloat();
                        break;
                    case 136:
                        Boolean_1 = ctx.ReadBool();
                        break;
                    case 144:
                        Enum_1 = (SAMPLE_NUMBER)ctx.ReadEnum();
                        break;
                    case 154:
                        RepeatedString().Read(ref ctx, ref ListTextAlias_2, 154);
                        break;
                    case 162:
                        RepeatedBytes().Read(ref ctx, ref ListBytes_2, 162);
                        break;
                    case 170:
                    case 168:
                        RepeatedInt32().Read(ref ctx, ref ListInt32_2, 170);
                        break;
                    case 178:
                    case 176:
                        RepeatedInt64().Read(ref ctx, ref ListInt64_2, 178);
                        break;
                    case 186:
                    case 184:
                        RepeatedUInt32().Read(ref ctx, ref ListUInt32_2, 186);
                        break;
                    case 194:
                    case 192:
                        RepeatedUInt64().Read(ref ctx, ref ListUInt64_2, 194);
                        break;
                    case 202:
                    case 200:
                        RepeatedSInt32().Read(ref ctx, ref ListSInt32_2, 202);
                        break;
                    case 210:
                    case 208:
                        RepeatedSInt64().Read(ref ctx, ref ListSInt64_2, 210);
                        break;
                    case 218:
                    case 221:
                        RepeatedFixed32().Read(ref ctx, ref ListFixed32_2, 218);
                        break;
                    case 226:
                    case 225:
                        RepeatedFixed64().Read(ref ctx, ref ListFixed64_2, 226);
                        break;
                    case 234:
                    case 237:
                        RepeatedSFixed32().Read(ref ctx, ref ListSFixed32_2, 234);
                        break;
                    case 242:
                    case 241:
                        RepeatedSFixed64().Read(ref ctx, ref ListSFixed64_2, 242);
                        break;
                    case 250:
                    case 249:
                        RepeatedDouble().Read(ref ctx, ref ListDouble_2, 250);
                        break;
                    case 258:
                    case 261:
                        RepeatedFloat().Read(ref ctx, ref ListFloat_2, 258);
                        break;
                    case 266:
                    case 264:
                        RepeatedBool().Read(ref ctx, ref ListBoolean_2, 266);
                        break;
                    case 274:
                    case 272:
                        RepeatedEnum<SAMPLE_NUMBER>().Read(ref ctx, ref ListEnum_2, 274);
                        break;
                    case 285:
                        Float_3 = ctx.ReadFloat();
                        break;
                    case 288:
                        Boolean_3 = ctx.ReadBool();
                        break;
                    case 4294967288:
                        Enum_3 = (SAMPLE_NUMBER)ctx.ReadEnum();
                        break;
                    case 298:
                        _mapInfo_4_codec.Read(ref ctx, ref MapInfo_4);
                        break;
                    case 306:
                        _mapInfo_5_codec.Read(ref ctx, ref MapInfo_5);
                        break;
                    case 314:
                        if (SampleInfo_4 == null)
                            SampleInfo_4 = new SampleInfo();
                        ctx.ReadMessage(SampleInfo_4);
                        break;
                    case 322:
                        Bytes_4 = ctx.ReadBytes();
                        break;
                    case 330:
                        RepeatedBytes().Read(ref ctx, ref ListBytes_4, 330);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => SampleId;
        #endregion
    }

    public partial class SampleDataTable : Table, IMessage<SampleDataTable>, IBufferMessage
    {
        #region Proto.Field
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, SampleData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SampleData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<SampleData>(Map), Instance.EnableWeakRef);
        }

        public SampleDataTable(SampleDataTable other) : this()
        {
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<SampleData>(Map), Instance.EnableWeakRef);
        }

        public SampleDataTable Clone()
        {
            return new SampleDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleDataTable);
        }

        public bool Equals(SampleDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(SampleDataTable other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }

            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        protected Dictionary<int, SampleData> Map { get; } = new ();
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class SampleInfo : Data, IMessage<SampleInfo>, IBufferMessage
    {
        #region Proto.Field
        public int InfoId;
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Uri Uri_1;
        public Guid Guid_1 = Guid.Empty;
        public List<DateTime> DateTime_2 = new ();
        public List<TimeSpan> TimeSpan_2 = new ();
        public List<Uri> Uri_2 = new ();
        public List<Guid> Guid_2 = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleInfo()
        {
        }

        public SampleInfo(SampleInfo other) : this()
        {
            InfoId = other.InfoId;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Uri_1 = other.Uri_1;
            Guid_1 = other.Guid_1;
            DateTime_2 = RepeatedDateTime().Clone(other.DateTime_2);
            TimeSpan_2 = RepeatedTimeSpan().Clone(other.TimeSpan_2);
            Uri_2 = RepeatedUri().Clone(other.Uri_2);
            Guid_2 = RepeatedGuid().Clone(other.Guid_2);
        }

        public SampleInfo Clone()
        {
            return new SampleInfo(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleInfo);
        }

        public bool Equals(SampleInfo other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (InfoId != other.InfoId) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (!RepeatedDateTime().AreEqual(DateTime_2, other.DateTime_2)) return false;
            if (!RepeatedTimeSpan().AreEqual(TimeSpan_2, other.TimeSpan_2)) return false;
            if (!RepeatedUri().AreEqual(Uri_2, other.Uri_2)) return false;
            if (!RepeatedGuid().AreEqual(Guid_2, other.Guid_2)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (InfoId != 0) hash ^= InfoId.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            hash ^= RepeatedDateTime().GetHashCode(DateTime_2);
            hash ^= RepeatedTimeSpan().GetHashCode(TimeSpan_2);
            hash ^= RepeatedUri().GetHashCode(Uri_2);
            hash ^= RepeatedGuid().GetHashCode(Guid_2);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (InfoId != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(InfoId);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(24);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(32);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(42);
                ctx.WriteString(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(50);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            RepeatedDateTime().Write(ref ctx, ref DateTime_2, 58);
            RepeatedTimeSpan().Write(ref ctx, ref TimeSpan_2, 66);
            RepeatedUri().Write(ref ctx, ref Uri_2, 74);
            RepeatedGuid().Write(ref ctx, ref Guid_2, 82);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (InfoId != 0)
            {
                size += 1 + ComputeSFixed32Size(InfoId);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 1 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 1 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                size += 1 + ComputeStringSize(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                size += 1 + ComputeStringSize(Guid_1.ToString("D"));
            }
            size += RepeatedDateTime().CalculateSize(DateTime_2, 58);
            size += RepeatedTimeSpan().CalculateSize(TimeSpan_2, 66);
            size += RepeatedUri().CalculateSize(Uri_2, 74);
            size += RepeatedGuid().CalculateSize(Guid_2, 82);
            return size;
        }

        public void MergeFrom(SampleInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InfoId != 0)
            {
                InfoId = other.InfoId;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            DateTime_2.AddRange(other.DateTime_2);
            TimeSpan_2.AddRange(other.TimeSpan_2);
            Uri_2.AddRange(other.Uri_2);
            Guid_2.AddRange(other.Guid_2);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        InfoId = ctx.ReadSFixed32();
                        break;
                    case 24:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 32:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 42:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                    case 50:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 58:
                    case 56:
                        RepeatedDateTime().Read(ref ctx, ref DateTime_2, 58);
                        break;
                    case 66:
                    case 64:
                        RepeatedTimeSpan().Read(ref ctx, ref TimeSpan_2, 66);
                        break;
                    case 74:
                        RepeatedUri().Read(ref ctx, ref Uri_2, 74);
                        break;
                    case 82:
                        RepeatedGuid().Read(ref ctx, ref Guid_2, 82);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => InfoId;
        #endregion
    }

    public enum NumberType
    {
        NUMBER_NONE = 0,
        /// <summary>
        /// Desc : 강인함 / Strength
        /// </summary>
        STAT_STR_BASE = 1,
        /// <summary>
        /// Desc : 민첩 / Agility
        /// </summary>
        STAT_AGI_BSSE = 2,
        /// <summary>
        /// Desc : 손재주 / Dexterity
        /// </summary>
        STAT_DEX_BASE = 3,
        /// <summary>
        /// Desc : 체력 / Constitution
        /// </summary>
        STAT_CON_BASE = 4,
        /// <summary>
        /// Desc : 지능 / Intelligence
        /// </summary>
        STAT_INT_BASE = 5,
        /// <summary>
        /// Desc : 지혜 / Wisdom
        /// </summary>
        STAT_WIS_BASE = 6,
        /// <summary>
        /// Desc : 매력 / Carisma
        /// </summary>
        STAT_CHA_BASE = 7,
        /// <summary>
        /// Desc : 기운 / Aura
        /// </summary>
        STAT_AUR_BASE = 8,
        /// <summary>
        /// Desc : 운 / Luck
        /// </summary>
        STAT_LCK_BASE = 9,
        /// <summary>
        /// Desc : 운명 / Fate
        /// </summary>
        STAT_FAT_BASE = 10,
        /// <summary>
        /// Desc : 마력 / Magic
        /// </summary>
        STAT_MGC_BASE = 11,
        /// <summary>
        /// Desc : 의지 / WillPower
        /// </summary>
        STAT_WIL_BASE = 12,
        /// <summary>
        /// Desc : 정기 / Essence
        /// </summary>
        STAT_ESS_BASE = 13,
        /// <summary>
        /// Desc : 힘 / Power
        /// </summary>
        STAT_POW_BASE = 14,
    }

    public enum NumbersType
    {
        NUMBERS_NONE = 0,
        BASIC_REWARD_ITEMS_WARRIOR = 1,
        BASIC_REWARD_ITEMS_ROGUE = 2,
        BASIC_REWARD_ITEMS_WIZARD = 3,
        BASIC_REWARD_ITEMS_CLERIC = 4,
        BASIC_REWARD_ITEMS_ARCHER = 5,
    }

    public enum SAMPLE_NUMBER
    {
        N01_000 = 0,
        N01_001 = 1,
        N01_002 = 2,
        N01_003 = 3,
        N01_004 = 4,
        N01_005 = 5,
        N01_006 = 6,
        N01_007 = 7,
        N01_008 = 8,
        N01_009 = 9,
        N01_010 = 10,
        N02_001 = 11,
        N02_002 = 12,
        N02_003 = 13,
        N02_004 = 14,
        N02_005 = 15,
        N02_006 = 16,
        N02_007 = 17,
        N02_008 = 18,
        N02_009 = 19,
        N02_010 = 20,
    }

}
#nullable restore
#endregion

// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;
using xpTURN.MegaData;
using static Tests.Repeated.V1.RepeatedTableSet;

namespace Tests.Repeated.V1
{
    public partial class RepeatedData : Data, IMessage<RepeatedData>, IBufferMessage
    {
        #region Proto.Field
        public int Id;
        public string IdAlias = "";
        public List<SAMPLE_NUMBER> Enum_1 = new ();
        public List<bool> Bool_1 = new ();
        public List<int> Int32_1 = new ();
        public List<int> SInt32_1 = new ();
        public List<int> SFixed32_1 = new ();
        public List<uint> UInt32_1 = new ();
        public List<uint> Fixed32_1 = new ();
        public List<long> Int64_1 = new ();
        public List<long> SInt64_1 = new ();
        public List<long> SFixed64_1 = new ();
        public List<ulong> UInt64_1 = new ();
        public List<ulong> Fixed64_1 = new ();
        public List<float> Float_1 = new ();
        public List<double> Double_1 = new ();
        public List<string> String_1 = new ();
        public List<ByteString> Bytes_1 = new ();
        public List<SampleInfo> Msg_1 = new ();
        public List<DateTime> DateTime_1 = new ();
        public List<TimeSpan> TimeSpan_1 = new ();
        public List<Guid> Guid_1 = new ();
        public List<Uri> Uri_1 = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public RepeatedData()
        {
        }

        public RepeatedData(RepeatedData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Enum_1 = RepeatedEnum<SAMPLE_NUMBER>().Clone(other.Enum_1);
            Bool_1 = RepeatedBool().Clone(other.Bool_1);
            Int32_1 = RepeatedInt32().Clone(other.Int32_1);
            SInt32_1 = RepeatedSInt32().Clone(other.SInt32_1);
            SFixed32_1 = RepeatedSFixed32().Clone(other.SFixed32_1);
            UInt32_1 = RepeatedUInt32().Clone(other.UInt32_1);
            Fixed32_1 = RepeatedFixed32().Clone(other.Fixed32_1);
            Int64_1 = RepeatedInt64().Clone(other.Int64_1);
            SInt64_1 = RepeatedSInt64().Clone(other.SInt64_1);
            SFixed64_1 = RepeatedSFixed64().Clone(other.SFixed64_1);
            UInt64_1 = RepeatedUInt64().Clone(other.UInt64_1);
            Fixed64_1 = RepeatedFixed64().Clone(other.Fixed64_1);
            Float_1 = RepeatedFloat().Clone(other.Float_1);
            Double_1 = RepeatedDouble().Clone(other.Double_1);
            String_1 = RepeatedString().Clone(other.String_1);
            Bytes_1 = RepeatedBytes().Clone(other.Bytes_1);
            Msg_1 = RepeatedMessage<SampleInfo>().Clone(other.Msg_1);
            DateTime_1 = RepeatedDateTime().Clone(other.DateTime_1);
            TimeSpan_1 = RepeatedTimeSpan().Clone(other.TimeSpan_1);
            Guid_1 = RepeatedGuid().Clone(other.Guid_1);
            Uri_1 = RepeatedUri().Clone(other.Uri_1);
        }

        public RepeatedData Clone()
        {
            return new RepeatedData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as RepeatedData);
        }

        public bool Equals(RepeatedData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!RepeatedEnum<SAMPLE_NUMBER>().AreEqual(Enum_1, other.Enum_1)) return false;
            if (!RepeatedBool().AreEqual(Bool_1, other.Bool_1)) return false;
            if (!RepeatedInt32().AreEqual(Int32_1, other.Int32_1)) return false;
            if (!RepeatedSInt32().AreEqual(SInt32_1, other.SInt32_1)) return false;
            if (!RepeatedSFixed32().AreEqual(SFixed32_1, other.SFixed32_1)) return false;
            if (!RepeatedUInt32().AreEqual(UInt32_1, other.UInt32_1)) return false;
            if (!RepeatedFixed32().AreEqual(Fixed32_1, other.Fixed32_1)) return false;
            if (!RepeatedInt64().AreEqual(Int64_1, other.Int64_1)) return false;
            if (!RepeatedSInt64().AreEqual(SInt64_1, other.SInt64_1)) return false;
            if (!RepeatedSFixed64().AreEqual(SFixed64_1, other.SFixed64_1)) return false;
            if (!RepeatedUInt64().AreEqual(UInt64_1, other.UInt64_1)) return false;
            if (!RepeatedFixed64().AreEqual(Fixed64_1, other.Fixed64_1)) return false;
            if (!RepeatedFloat().AreEqual(Float_1, other.Float_1)) return false;
            if (!RepeatedDouble().AreEqual(Double_1, other.Double_1)) return false;
            if (!RepeatedString().AreEqual(String_1, other.String_1)) return false;
            if (!RepeatedBytes().AreEqual(Bytes_1, other.Bytes_1)) return false;
            if (!RepeatedMessage<SampleInfo>().AreEqual(Msg_1, other.Msg_1)) return false;
            if (!RepeatedDateTime().AreEqual(DateTime_1, other.DateTime_1)) return false;
            if (!RepeatedTimeSpan().AreEqual(TimeSpan_1, other.TimeSpan_1)) return false;
            if (!RepeatedGuid().AreEqual(Guid_1, other.Guid_1)) return false;
            if (!RepeatedUri().AreEqual(Uri_1, other.Uri_1)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            hash ^= RepeatedEnum<SAMPLE_NUMBER>().GetHashCode(Enum_1);
            hash ^= RepeatedBool().GetHashCode(Bool_1);
            hash ^= RepeatedInt32().GetHashCode(Int32_1);
            hash ^= RepeatedSInt32().GetHashCode(SInt32_1);
            hash ^= RepeatedSFixed32().GetHashCode(SFixed32_1);
            hash ^= RepeatedUInt32().GetHashCode(UInt32_1);
            hash ^= RepeatedFixed32().GetHashCode(Fixed32_1);
            hash ^= RepeatedInt64().GetHashCode(Int64_1);
            hash ^= RepeatedSInt64().GetHashCode(SInt64_1);
            hash ^= RepeatedSFixed64().GetHashCode(SFixed64_1);
            hash ^= RepeatedUInt64().GetHashCode(UInt64_1);
            hash ^= RepeatedFixed64().GetHashCode(Fixed64_1);
            hash ^= RepeatedFloat().GetHashCode(Float_1);
            hash ^= RepeatedDouble().GetHashCode(Double_1);
            hash ^= RepeatedString().GetHashCode(String_1);
            hash ^= RepeatedBytes().GetHashCode(Bytes_1);
            hash ^= RepeatedMessage<SampleInfo>().GetHashCode(Msg_1);
            hash ^= RepeatedDateTime().GetHashCode(DateTime_1);
            hash ^= RepeatedTimeSpan().GetHashCode(TimeSpan_1);
            hash ^= RepeatedGuid().GetHashCode(Guid_1);
            hash ^= RepeatedUri().GetHashCode(Uri_1);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            RepeatedEnum<SAMPLE_NUMBER>().Write(ref ctx, ref Enum_1, 26);
            RepeatedBool().Write(ref ctx, ref Bool_1, 34);
            RepeatedInt32().Write(ref ctx, ref Int32_1, 42);
            RepeatedSInt32().Write(ref ctx, ref SInt32_1, 50);
            RepeatedSFixed32().Write(ref ctx, ref SFixed32_1, 58);
            RepeatedUInt32().Write(ref ctx, ref UInt32_1, 66);
            RepeatedFixed32().Write(ref ctx, ref Fixed32_1, 74);
            RepeatedInt64().Write(ref ctx, ref Int64_1, 82);
            RepeatedSInt64().Write(ref ctx, ref SInt64_1, 90);
            RepeatedSFixed64().Write(ref ctx, ref SFixed64_1, 98);
            RepeatedUInt64().Write(ref ctx, ref UInt64_1, 106);
            RepeatedFixed64().Write(ref ctx, ref Fixed64_1, 114);
            RepeatedFloat().Write(ref ctx, ref Float_1, 122);
            RepeatedDouble().Write(ref ctx, ref Double_1, 130);
            RepeatedString().Write(ref ctx, ref String_1, 138);
            RepeatedBytes().Write(ref ctx, ref Bytes_1, 146);
            RepeatedMessage<SampleInfo>().Write(ref ctx, ref Msg_1, 154);
            RepeatedDateTime().Write(ref ctx, ref DateTime_1, 162);
            RepeatedTimeSpan().Write(ref ctx, ref TimeSpan_1, 170);
            RepeatedGuid().Write(ref ctx, ref Guid_1, 178);
            RepeatedUri().Write(ref ctx, ref Uri_1, 4294967290);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            size += RepeatedEnum<SAMPLE_NUMBER>().CalculateSize(Enum_1, 26);
            size += RepeatedBool().CalculateSize(Bool_1, 34);
            size += RepeatedInt32().CalculateSize(Int32_1, 42);
            size += RepeatedSInt32().CalculateSize(SInt32_1, 50);
            size += RepeatedSFixed32().CalculateSize(SFixed32_1, 58);
            size += RepeatedUInt32().CalculateSize(UInt32_1, 66);
            size += RepeatedFixed32().CalculateSize(Fixed32_1, 74);
            size += RepeatedInt64().CalculateSize(Int64_1, 82);
            size += RepeatedSInt64().CalculateSize(SInt64_1, 90);
            size += RepeatedSFixed64().CalculateSize(SFixed64_1, 98);
            size += RepeatedUInt64().CalculateSize(UInt64_1, 106);
            size += RepeatedFixed64().CalculateSize(Fixed64_1, 114);
            size += RepeatedFloat().CalculateSize(Float_1, 122);
            size += RepeatedDouble().CalculateSize(Double_1, 130);
            size += RepeatedString().CalculateSize(String_1, 138);
            size += RepeatedBytes().CalculateSize(Bytes_1, 146);
            size += RepeatedMessage<SampleInfo>().CalculateSize(Msg_1, 154);
            size += RepeatedDateTime().CalculateSize(DateTime_1, 162);
            size += RepeatedTimeSpan().CalculateSize(TimeSpan_1, 170);
            size += RepeatedGuid().CalculateSize(Guid_1, 178);
            size += RepeatedUri().CalculateSize(Uri_1, 4294967290);
            return size;
        }

        public void MergeFrom(RepeatedData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            Enum_1.AddRange(other.Enum_1);
            Bool_1.AddRange(other.Bool_1);
            Int32_1.AddRange(other.Int32_1);
            SInt32_1.AddRange(other.SInt32_1);
            SFixed32_1.AddRange(other.SFixed32_1);
            UInt32_1.AddRange(other.UInt32_1);
            Fixed32_1.AddRange(other.Fixed32_1);
            Int64_1.AddRange(other.Int64_1);
            SInt64_1.AddRange(other.SInt64_1);
            SFixed64_1.AddRange(other.SFixed64_1);
            UInt64_1.AddRange(other.UInt64_1);
            Fixed64_1.AddRange(other.Fixed64_1);
            Float_1.AddRange(other.Float_1);
            Double_1.AddRange(other.Double_1);
            String_1.AddRange(other.String_1);
            Bytes_1.AddRange(other.Bytes_1);
            Msg_1.AddRange(other.Msg_1);
            DateTime_1.AddRange(other.DateTime_1);
            TimeSpan_1.AddRange(other.TimeSpan_1);
            Guid_1.AddRange(other.Guid_1);
            Uri_1.AddRange(other.Uri_1);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                    case 24:
                        RepeatedEnum<SAMPLE_NUMBER>().Read(ref ctx, ref Enum_1, 26);
                        break;
                    case 34:
                    case 32:
                        RepeatedBool().Read(ref ctx, ref Bool_1, 34);
                        break;
                    case 42:
                    case 40:
                        RepeatedInt32().Read(ref ctx, ref Int32_1, 42);
                        break;
                    case 50:
                    case 48:
                        RepeatedSInt32().Read(ref ctx, ref SInt32_1, 50);
                        break;
                    case 58:
                    case 61:
                        RepeatedSFixed32().Read(ref ctx, ref SFixed32_1, 58);
                        break;
                    case 66:
                    case 64:
                        RepeatedUInt32().Read(ref ctx, ref UInt32_1, 66);
                        break;
                    case 74:
                    case 77:
                        RepeatedFixed32().Read(ref ctx, ref Fixed32_1, 74);
                        break;
                    case 82:
                    case 80:
                        RepeatedInt64().Read(ref ctx, ref Int64_1, 82);
                        break;
                    case 90:
                    case 88:
                        RepeatedSInt64().Read(ref ctx, ref SInt64_1, 90);
                        break;
                    case 98:
                    case 97:
                        RepeatedSFixed64().Read(ref ctx, ref SFixed64_1, 98);
                        break;
                    case 106:
                    case 104:
                        RepeatedUInt64().Read(ref ctx, ref UInt64_1, 106);
                        break;
                    case 114:
                    case 113:
                        RepeatedFixed64().Read(ref ctx, ref Fixed64_1, 114);
                        break;
                    case 122:
                    case 125:
                        RepeatedFloat().Read(ref ctx, ref Float_1, 122);
                        break;
                    case 130:
                    case 129:
                        RepeatedDouble().Read(ref ctx, ref Double_1, 130);
                        break;
                    case 138:
                        RepeatedString().Read(ref ctx, ref String_1, 138);
                        break;
                    case 146:
                        RepeatedBytes().Read(ref ctx, ref Bytes_1, 146);
                        break;
                    case 154:
                        RepeatedMessage<SampleInfo>().Read(ref ctx, ref Msg_1, 154);
                        break;
                    case 162:
                    case 160:
                        RepeatedDateTime().Read(ref ctx, ref DateTime_1, 162);
                        break;
                    case 170:
                    case 168:
                        RepeatedTimeSpan().Read(ref ctx, ref TimeSpan_1, 170);
                        break;
                    case 178:
                        RepeatedGuid().Read(ref ctx, ref Guid_1, 178);
                        break;
                    case 4294967290:
                        RepeatedUri().Read(ref ctx, ref Uri_1, 4294967290);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public int GetId() => Id;
        #endregion
    }

    public partial class RepeatedDataTable : Table, IMessage<RepeatedDataTable>, IBufferMessage
    {
        #region Proto.Field
        public Dictionary<int, RepeatedData> Map = new ();
        public MetaNestedData MetaNestedData = new MetaNestedData();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, RepeatedData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<RepeatedData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public RepeatedDataTable()
        {
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<RepeatedData>(Map));
        }

        public RepeatedDataTable(RepeatedDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
            if (other.MetaNestedData != null) MetaNestedData = other.MetaNestedData.Clone();
            MetaNestedData.SetupIntWrapper(new MapIntWrapper<RepeatedData>(Map));
        }

        public RepeatedDataTable Clone()
        {
            return new RepeatedDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as RepeatedDataTable);
        }

        public bool Equals(RepeatedDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            if (!object.Equals(MetaNestedData, other.MetaNestedData)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            if (MetaNestedData != null) hash ^= MetaNestedData.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
            if (MetaNestedData != null)
            {
                ctx.WriteRawTag(186, 163, 9);
                ctx.WriteMessage(MetaNestedData);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            if (MetaNestedData != null)
            {
                size += 3 + CodedOutputStream.ComputeMessageSize(MetaNestedData);
            }
            return size;
        }

        public void MergeFrom(RepeatedDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
            if (other.MetaNestedData != null)
            {
                if (MetaNestedData == null)
                    MetaNestedData = new MetaNestedData();
                MetaNestedData.MergeFrom(other.MetaNestedData);
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                    case 151994:
                        ctx.ReadMessage(MetaNestedData);
                        break;
                }
            }
        }
        #endregion

        #region Table
        override public MetaNestedData GetMetaNestedData() => MetaNestedData;
        override public IMapIntWrapper GetMap() => MetaNestedData.MapIntWrapper;
        #endregion
    }

    public partial class SampleInfo : Data, IMessage<SampleInfo>, IBufferMessage
    {
        #region Proto.Field
        public int InfoId;
        public string InfoIdAlias = "";
        public List<DateTime> DateTime_1 = new ();
        public List<TimeSpan> TimeSpan_1 = new ();
        public List<Guid> Guid_1 = new ();
        public List<Uri> Uri_1 = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleInfo()
        {
        }

        public SampleInfo(SampleInfo other) : this()
        {
            InfoId = other.InfoId;
            InfoIdAlias = other.InfoIdAlias;
            DateTime_1 = RepeatedDateTime().Clone(other.DateTime_1);
            TimeSpan_1 = RepeatedTimeSpan().Clone(other.TimeSpan_1);
            Guid_1 = RepeatedGuid().Clone(other.Guid_1);
            Uri_1 = RepeatedUri().Clone(other.Uri_1);
        }

        public SampleInfo Clone()
        {
            return new SampleInfo(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleInfo);
        }

        public bool Equals(SampleInfo other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (InfoId != other.InfoId) return false;
            if (InfoIdAlias != other.InfoIdAlias) return false;
            if (!RepeatedDateTime().AreEqual(DateTime_1, other.DateTime_1)) return false;
            if (!RepeatedTimeSpan().AreEqual(TimeSpan_1, other.TimeSpan_1)) return false;
            if (!RepeatedGuid().AreEqual(Guid_1, other.Guid_1)) return false;
            if (!RepeatedUri().AreEqual(Uri_1, other.Uri_1)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (InfoId != 0) hash ^= InfoId.GetHashCode();
            if (InfoIdAlias.Length != 0) hash ^= InfoIdAlias.GetHashCode();
            hash ^= RepeatedDateTime().GetHashCode(DateTime_1);
            hash ^= RepeatedTimeSpan().GetHashCode(TimeSpan_1);
            hash ^= RepeatedGuid().GetHashCode(Guid_1);
            hash ^= RepeatedUri().GetHashCode(Uri_1);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (InfoId != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(InfoId);
            }
            if (InfoIdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(InfoIdAlias);
            }
            RepeatedDateTime().Write(ref ctx, ref DateTime_1, 26);
            RepeatedTimeSpan().Write(ref ctx, ref TimeSpan_1, 34);
            RepeatedGuid().Write(ref ctx, ref Guid_1, 42);
            RepeatedUri().Write(ref ctx, ref Uri_1, 50);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (InfoId != 0)
            {
                size += 1 + ComputeSFixed32Size(InfoId);
            }
            if (InfoIdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(InfoIdAlias);
            }
            size += RepeatedDateTime().CalculateSize(DateTime_1, 26);
            size += RepeatedTimeSpan().CalculateSize(TimeSpan_1, 34);
            size += RepeatedGuid().CalculateSize(Guid_1, 42);
            size += RepeatedUri().CalculateSize(Uri_1, 50);
            return size;
        }

        public void MergeFrom(SampleInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InfoId != 0)
            {
                InfoId = other.InfoId;
            }
            if (other.InfoIdAlias.Length != 0)
            {
                InfoIdAlias = other.InfoIdAlias;
            }
            DateTime_1.AddRange(other.DateTime_1);
            TimeSpan_1.AddRange(other.TimeSpan_1);
            Guid_1.AddRange(other.Guid_1);
            Uri_1.AddRange(other.Uri_1);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        InfoId = ctx.ReadSFixed32();
                        break;
                    case 18:
                        InfoIdAlias = ctx.ReadString();
                        break;
                    case 26:
                    case 24:
                        RepeatedDateTime().Read(ref ctx, ref DateTime_1, 26);
                        break;
                    case 34:
                    case 32:
                        RepeatedTimeSpan().Read(ref ctx, ref TimeSpan_1, 34);
                        break;
                    case 42:
                        RepeatedGuid().Read(ref ctx, ref Guid_1, 42);
                        break;
                    case 50:
                        RepeatedUri().Read(ref ctx, ref Uri_1, 50);
                        break;
                }
            }
        }
        #endregion

        #region Table
        #endregion
    }

    public enum SAMPLE_NUMBER
    {
        N01_000 = 0,
        N01_001 = 1,
        N01_002 = 2,
        N01_003 = 3,
        N01_004 = 4,
        N01_005 = 5,
        N01_006 = 6,
        N01_007 = 7,
        N01_008 = 8,
        N01_009 = 9,
        N01_010 = 10,
    }

}
#nullable restore
#endregion

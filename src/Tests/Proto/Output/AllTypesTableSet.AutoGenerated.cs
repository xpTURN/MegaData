// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
// </auto-generated>

#region Designer generated code
#nullable disable
using System;
using System.Collections.Generic;

using xpTURN.Common;
using xpTURN.Protobuf;
using xpTURN.Protobuf.Collections;
using static xpTURN.Protobuf.Collections.ProtobufEqualityComparers;
using static xpTURN.Protobuf.CodedOutputStream;
using static xpTURN.Protobuf.xpRepeatedFieldHelper;
using static xpTURN.Protobuf.xpDateTimeUtils;

namespace Tests.AllTypes
{
    public partial class AllTypesData : IMessage<AllTypesData>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for AllTypesData
        // Id: Tag(13) = 1 << 3 | 5
        // IdAlias: Tag(18) = 2 << 3 | 2
        // Alias_1: Tag(26) = 3 << 3 | 2
        // Bytes_1: Tag(34) = 4 << 3 | 2
        // Int32_1: Tag(40) = 5 << 3 | 0
        // Int64_1: Tag(48) = 6 << 3 | 0
        // UInt32_1: Tag(56) = 7 << 3 | 0
        // UInt64_1: Tag(64) = 8 << 3 | 0
        // SInt32_1: Tag(72) = 9 << 3 | 0
        // SInt64_1: Tag(80) = 10 << 3 | 0
        // Fixed32_1: Tag(93) = 11 << 3 | 5
        // Fixed64_1: Tag(97) = 12 << 3 | 1
        // SFixed32_1: Tag(109) = 13 << 3 | 5
        // SFixed64_1: Tag(113) = 14 << 3 | 1
        // Double_1: Tag(121) = 15 << 3 | 1
        // Float_1: Tag(133) = 16 << 3 | 5
        // Boolean_1: Tag(136) = 17 << 3 | 0
        // Enum_1: Tag(144) = 18 << 3 | 0
        // DateTime_1: Tag(152) = 19 << 3 | 0
        // TimeSpan_1: Tag(160) = 20 << 3 | 0
        // Uri_1: Tag(170) = 21 << 3 | 2
        // Guid_1: Tag(178) = 22 << 3 | 2
        // ListTextAlias_2: Tag(186) = 23 << 3 | 2
        // ListBytes_2: Tag(194) = 24 << 3 | 2
        // ListInt32_2: Tag(202) = 25 << 3 | 2
        // ListInt64_2: Tag(210) = 26 << 3 | 2
        // ListUInt32_2: Tag(218) = 27 << 3 | 2
        // ListUInt64_2: Tag(226) = 28 << 3 | 2
        // ListSInt32_2: Tag(234) = 29 << 3 | 2
        // ListSInt64_2: Tag(242) = 30 << 3 | 2
        // ListFixed32_2: Tag(250) = 31 << 3 | 2
        // ListFixed64_2: Tag(258) = 32 << 3 | 2
        // ListSFixed32_2: Tag(266) = 33 << 3 | 2
        // ListSFixed64_2: Tag(274) = 34 << 3 | 2
        // ListDouble_2: Tag(282) = 35 << 3 | 2
        // ListFloat_2: Tag(290) = 36 << 3 | 2
        // ListBoolean_2: Tag(298) = 37 << 3 | 2
        // ListEnum_2: Tag(306) = 38 << 3 | 2
        // ListDateTime_2: Tag(314) = 39 << 3 | 2
        // ListTimeSpan_2: Tag(322) = 40 << 3 | 2
        // ListUri_2: Tag(330) = 41 << 3 | 2
        // ListGuid_2: Tag(338) = 42 << 3 | 2
        // MapString_3: Tag(346) = 43 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2
        // MapAlias_3: Tag(354) = 44 << 3 | 2
        //     keyTag(10) = 1 << 3 | 2
        //     valueTag(18) = 2 << 3 | 2
        // SampleInfo_1: Tag(362) = 45 << 3 | 2
        // MapInfo_3: Tag(378) = 47 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2
        // MapEnum_3: Tag(386) = 48 << 3 | 2
        //     keyTag(8) = 1 << 3 | 0
        //     valueTag(18) = 2 << 3 | 2

        public int Id;
        public string IdAlias = "";
        public string Alias_1 = "";
        public ByteString Bytes_1 = ByteString.Empty;
        public int Int32_1;
        public long Int64_1;
        public uint UInt32_1;
        public ulong UInt64_1;
        public int SInt32_1;
        public long SInt64_1;
        public uint Fixed32_1;
        public ulong Fixed64_1;
        public int SFixed32_1;
        public long SFixed64_1;
        public double Double_1;
        public float Float_1;
        public bool Boolean_1;
        public SAMPLE_NUMBER Enum_1;
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Uri Uri_1;
        public Guid Guid_1 = Guid.Empty;
        public List<string> ListTextAlias_2 = new ();
        public List<ByteString> ListBytes_2 = new ();
        public List<int> ListInt32_2 = new ();
        public List<long> ListInt64_2 = new ();
        public List<uint> ListUInt32_2 = new ();
        public List<ulong> ListUInt64_2 = new ();
        public List<int> ListSInt32_2 = new ();
        public List<long> ListSInt64_2 = new ();
        public List<uint> ListFixed32_2 = new ();
        public List<ulong> ListFixed64_2 = new ();
        public List<int> ListSFixed32_2 = new ();
        public List<long> ListSFixed64_2 = new ();
        public List<double> ListDouble_2 = new ();
        public List<float> ListFloat_2 = new ();
        public List<bool> ListBoolean_2 = new ();
        public List<SAMPLE_NUMBER> ListEnum_2 = new ();
        public List<DateTime> ListDateTime_2 = new ();
        public List<TimeSpan> ListTimeSpan_2 = new ();
        public List<Uri> ListUri_2 = new ();
        public List<Guid> ListGuid_2 = new ();
        public Dictionary<int, string> MapString_3 = new ();
        public Dictionary<string, string> MapAlias_3 = new ();
        public SampleInfo SampleInfo_1 = null;
        public Dictionary<int, SampleInfo> MapInfo_3 = new ();
        public Dictionary<SAMPLE_NUMBER, string> MapEnum_3 = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, string> _mapString_3_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldHelper.StringCodec, 346, 13, 18);
        protected static readonly xpMapCodec<string, string> _mapAlias_3_codec
            = new (xpFieldHelper.StringCodec, xpFieldHelper.StringCodec, 354, 10, 18);
        protected static readonly xpMapCodec<int, SampleInfo> _mapInfo_3_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SampleInfo>.MessageCodec, 378, 13, 18);
        protected static readonly xpMapCodec<SAMPLE_NUMBER, string> _mapEnum_3_codec
            = new (xpFieldCodecForEnum<SAMPLE_NUMBER>.EnumCodec, xpFieldHelper.StringCodec, 386, 8, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public AllTypesData()
        {
        }

        public AllTypesData(AllTypesData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            Alias_1 = other.Alias_1;
            Bytes_1 = other.Bytes_1;
            Int32_1 = other.Int32_1;
            Int64_1 = other.Int64_1;
            UInt32_1 = other.UInt32_1;
            UInt64_1 = other.UInt64_1;
            SInt32_1 = other.SInt32_1;
            SInt64_1 = other.SInt64_1;
            Fixed32_1 = other.Fixed32_1;
            Fixed64_1 = other.Fixed64_1;
            SFixed32_1 = other.SFixed32_1;
            SFixed64_1 = other.SFixed64_1;
            Double_1 = other.Double_1;
            Float_1 = other.Float_1;
            Boolean_1 = other.Boolean_1;
            Enum_1 = other.Enum_1;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Uri_1 = other.Uri_1;
            Guid_1 = other.Guid_1;
            ListTextAlias_2 = RepeatedString().Clone(other.ListTextAlias_2);
            ListBytes_2 = RepeatedBytes().Clone(other.ListBytes_2);
            ListInt32_2 = RepeatedInt32().Clone(other.ListInt32_2);
            ListInt64_2 = RepeatedInt64().Clone(other.ListInt64_2);
            ListUInt32_2 = RepeatedUInt32().Clone(other.ListUInt32_2);
            ListUInt64_2 = RepeatedUInt64().Clone(other.ListUInt64_2);
            ListSInt32_2 = RepeatedSInt32().Clone(other.ListSInt32_2);
            ListSInt64_2 = RepeatedSInt64().Clone(other.ListSInt64_2);
            ListFixed32_2 = RepeatedFixed32().Clone(other.ListFixed32_2);
            ListFixed64_2 = RepeatedFixed64().Clone(other.ListFixed64_2);
            ListSFixed32_2 = RepeatedSFixed32().Clone(other.ListSFixed32_2);
            ListSFixed64_2 = RepeatedSFixed64().Clone(other.ListSFixed64_2);
            ListDouble_2 = RepeatedDouble().Clone(other.ListDouble_2);
            ListFloat_2 = RepeatedFloat().Clone(other.ListFloat_2);
            ListBoolean_2 = RepeatedBool().Clone(other.ListBoolean_2);
            ListEnum_2 = RepeatedEnum<SAMPLE_NUMBER>().Clone(other.ListEnum_2);
            ListDateTime_2 = RepeatedDateTime().Clone(other.ListDateTime_2);
            ListTimeSpan_2 = RepeatedTimeSpan().Clone(other.ListTimeSpan_2);
            ListUri_2 = RepeatedUri().Clone(other.ListUri_2);
            ListGuid_2 = RepeatedGuid().Clone(other.ListGuid_2);
            MapString_3 = _mapString_3_codec.Clone(other.MapString_3);
            MapAlias_3 = _mapAlias_3_codec.Clone(other.MapAlias_3);
            if (other.SampleInfo_1 != null) SampleInfo_1 = other.SampleInfo_1.Clone();
            MapInfo_3 = _mapInfo_3_codec.Clone(other.MapInfo_3);
            MapEnum_3 = _mapEnum_3_codec.Clone(other.MapEnum_3);
        }

        public AllTypesData Clone()
        {
            return new AllTypesData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as AllTypesData);
        }

        public bool Equals(AllTypesData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (Alias_1 != other.Alias_1) return false;
            if (Bytes_1 != other.Bytes_1) return false;
            if (Int32_1 != other.Int32_1) return false;
            if (Int64_1 != other.Int64_1) return false;
            if (UInt32_1 != other.UInt32_1) return false;
            if (UInt64_1 != other.UInt64_1) return false;
            if (SInt32_1 != other.SInt32_1) return false;
            if (SInt64_1 != other.SInt64_1) return false;
            if (Fixed32_1 != other.Fixed32_1) return false;
            if (Fixed64_1 != other.Fixed64_1) return false;
            if (SFixed32_1 != other.SFixed32_1) return false;
            if (SFixed64_1 != other.SFixed64_1) return false;
            if (!BitwiseDoubleEqualityComparer.Equals(Double_1, other.Double_1)) return false;
            if (!BitwiseSingleEqualityComparer.Equals(Float_1, other.Float_1)) return false;
            if (Boolean_1 != other.Boolean_1) return false;
            if (Enum_1 != other.Enum_1) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (!RepeatedString().AreEqual(ListTextAlias_2, other.ListTextAlias_2)) return false;
            if (!RepeatedBytes().AreEqual(ListBytes_2, other.ListBytes_2)) return false;
            if (!RepeatedInt32().AreEqual(ListInt32_2, other.ListInt32_2)) return false;
            if (!RepeatedInt64().AreEqual(ListInt64_2, other.ListInt64_2)) return false;
            if (!RepeatedUInt32().AreEqual(ListUInt32_2, other.ListUInt32_2)) return false;
            if (!RepeatedUInt64().AreEqual(ListUInt64_2, other.ListUInt64_2)) return false;
            if (!RepeatedSInt32().AreEqual(ListSInt32_2, other.ListSInt32_2)) return false;
            if (!RepeatedSInt64().AreEqual(ListSInt64_2, other.ListSInt64_2)) return false;
            if (!RepeatedFixed32().AreEqual(ListFixed32_2, other.ListFixed32_2)) return false;
            if (!RepeatedFixed64().AreEqual(ListFixed64_2, other.ListFixed64_2)) return false;
            if (!RepeatedSFixed32().AreEqual(ListSFixed32_2, other.ListSFixed32_2)) return false;
            if (!RepeatedSFixed64().AreEqual(ListSFixed64_2, other.ListSFixed64_2)) return false;
            if (!RepeatedDouble().AreEqual(ListDouble_2, other.ListDouble_2)) return false;
            if (!RepeatedFloat().AreEqual(ListFloat_2, other.ListFloat_2)) return false;
            if (!RepeatedBool().AreEqual(ListBoolean_2, other.ListBoolean_2)) return false;
            if (!RepeatedEnum<SAMPLE_NUMBER>().AreEqual(ListEnum_2, other.ListEnum_2)) return false;
            if (!RepeatedDateTime().AreEqual(ListDateTime_2, other.ListDateTime_2)) return false;
            if (!RepeatedTimeSpan().AreEqual(ListTimeSpan_2, other.ListTimeSpan_2)) return false;
            if (!RepeatedUri().AreEqual(ListUri_2, other.ListUri_2)) return false;
            if (!RepeatedGuid().AreEqual(ListGuid_2, other.ListGuid_2)) return false;
            if (!_mapString_3_codec.AreEqual(MapString_3, other.MapString_3)) return false;
            if (!_mapAlias_3_codec.AreEqual(MapAlias_3, other.MapAlias_3)) return false;
            if (!object.Equals(SampleInfo_1, other.SampleInfo_1)) return false;
            if (!_mapInfo_3_codec.AreEqual(MapInfo_3, other.MapInfo_3)) return false;
            if (!_mapEnum_3_codec.AreEqual(MapEnum_3, other.MapEnum_3)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (Alias_1.Length != 0) hash ^= Alias_1.GetHashCode();
            if (Bytes_1.Length != 0) hash ^= Bytes_1.GetHashCode();
            if (Int32_1 != 0) hash ^= Int32_1.GetHashCode();
            if (Int64_1 != 0L) hash ^= Int64_1.GetHashCode();
            if (UInt32_1 != 0U) hash ^= UInt32_1.GetHashCode();
            if (UInt64_1 != 0UL) hash ^= UInt64_1.GetHashCode();
            if (SInt32_1 != 0) hash ^= SInt32_1.GetHashCode();
            if (SInt64_1 != 0L) hash ^= SInt64_1.GetHashCode();
            if (Fixed32_1 != 0U) hash ^= Fixed32_1.GetHashCode();
            if (Fixed64_1 != 0UL) hash ^= Fixed64_1.GetHashCode();
            if (SFixed32_1 != 0) hash ^= SFixed32_1.GetHashCode();
            if (SFixed64_1 != 0L) hash ^= SFixed64_1.GetHashCode();
            if (Double_1 != 0D) hash ^= BitwiseDoubleEqualityComparer.GetHashCode(Double_1);
            if (Float_1 != 0F) hash ^= BitwiseSingleEqualityComparer.GetHashCode(Float_1);
            if (Boolean_1 != false) hash ^= Boolean_1.GetHashCode();
            if (Enum_1 != default(SAMPLE_NUMBER)) hash ^= Enum_1.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            hash ^= RepeatedString().GetHashCode(ListTextAlias_2);
            hash ^= RepeatedBytes().GetHashCode(ListBytes_2);
            hash ^= RepeatedInt32().GetHashCode(ListInt32_2);
            hash ^= RepeatedInt64().GetHashCode(ListInt64_2);
            hash ^= RepeatedUInt32().GetHashCode(ListUInt32_2);
            hash ^= RepeatedUInt64().GetHashCode(ListUInt64_2);
            hash ^= RepeatedSInt32().GetHashCode(ListSInt32_2);
            hash ^= RepeatedSInt64().GetHashCode(ListSInt64_2);
            hash ^= RepeatedFixed32().GetHashCode(ListFixed32_2);
            hash ^= RepeatedFixed64().GetHashCode(ListFixed64_2);
            hash ^= RepeatedSFixed32().GetHashCode(ListSFixed32_2);
            hash ^= RepeatedSFixed64().GetHashCode(ListSFixed64_2);
            hash ^= RepeatedDouble().GetHashCode(ListDouble_2);
            hash ^= RepeatedFloat().GetHashCode(ListFloat_2);
            hash ^= RepeatedBool().GetHashCode(ListBoolean_2);
            hash ^= RepeatedEnum<SAMPLE_NUMBER>().GetHashCode(ListEnum_2);
            hash ^= RepeatedDateTime().GetHashCode(ListDateTime_2);
            hash ^= RepeatedTimeSpan().GetHashCode(ListTimeSpan_2);
            hash ^= RepeatedUri().GetHashCode(ListUri_2);
            hash ^= RepeatedGuid().GetHashCode(ListGuid_2);
            hash ^= _mapString_3_codec.GetHashCode(MapString_3);
            hash ^= _mapAlias_3_codec.GetHashCode(MapAlias_3);
            if (SampleInfo_1 != null) hash ^= SampleInfo_1.GetHashCode();
            hash ^= _mapInfo_3_codec.GetHashCode(MapInfo_3);
            hash ^= _mapEnum_3_codec.GetHashCode(MapEnum_3);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (Alias_1.Length != 0)
            {
                ctx.WriteRawTag(26);
                ctx.WriteString(Alias_1);
            }
            if (Bytes_1.Length != 0)
            {
                ctx.WriteRawTag(34);
                ctx.WriteBytes(Bytes_1);
            }
            if (Int32_1 != 0)
            {
                ctx.WriteRawTag(40);
                ctx.WriteInt32(Int32_1);
            }
            if (Int64_1 != 0L)
            {
                ctx.WriteRawTag(48);
                ctx.WriteInt64(Int64_1);
            }
            if (UInt32_1 != 0U)
            {
                ctx.WriteRawTag(56);
                ctx.WriteUInt32(UInt32_1);
            }
            if (UInt64_1 != 0UL)
            {
                ctx.WriteRawTag(64);
                ctx.WriteUInt64(UInt64_1);
            }
            if (SInt32_1 != 0)
            {
                ctx.WriteRawTag(72);
                ctx.WriteSInt32(SInt32_1);
            }
            if (SInt64_1 != 0L)
            {
                ctx.WriteRawTag(80);
                ctx.WriteSInt64(SInt64_1);
            }
            if (Fixed32_1 != 0U)
            {
                ctx.WriteRawTag(93);
                ctx.WriteFixed32(Fixed32_1);
            }
            if (Fixed64_1 != 0UL)
            {
                ctx.WriteRawTag(97);
                ctx.WriteFixed64(Fixed64_1);
            }
            if (SFixed32_1 != 0)
            {
                ctx.WriteRawTag(109);
                ctx.WriteSFixed32(SFixed32_1);
            }
            if (SFixed64_1 != 0L)
            {
                ctx.WriteRawTag(113);
                ctx.WriteSFixed64(SFixed64_1);
            }
            if (Double_1 != 0D)
            {
                ctx.WriteRawTag(121);
                ctx.WriteDouble(Double_1);
            }
            if (Float_1 != 0F)
            {
                ctx.WriteRawTag(133, 1);
                ctx.WriteFloat(Float_1);
            }
            if (Boolean_1 != false)
            {
                ctx.WriteRawTag(136, 1);
                ctx.WriteBool(Boolean_1);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                ctx.WriteRawTag(144, 1);
                ctx.WriteEnum((int)Enum_1);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(152, 1);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(160, 1);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(170, 1);
                ctx.WriteString(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(178, 1);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            RepeatedString().Write(ref ctx, ref ListTextAlias_2, 186);
            RepeatedBytes().Write(ref ctx, ref ListBytes_2, 194);
            RepeatedInt32().Write(ref ctx, ref ListInt32_2, 202);
            RepeatedInt64().Write(ref ctx, ref ListInt64_2, 210);
            RepeatedUInt32().Write(ref ctx, ref ListUInt32_2, 218);
            RepeatedUInt64().Write(ref ctx, ref ListUInt64_2, 226);
            RepeatedSInt32().Write(ref ctx, ref ListSInt32_2, 234);
            RepeatedSInt64().Write(ref ctx, ref ListSInt64_2, 242);
            RepeatedFixed32().Write(ref ctx, ref ListFixed32_2, 250);
            RepeatedFixed64().Write(ref ctx, ref ListFixed64_2, 258);
            RepeatedSFixed32().Write(ref ctx, ref ListSFixed32_2, 266);
            RepeatedSFixed64().Write(ref ctx, ref ListSFixed64_2, 274);
            RepeatedDouble().Write(ref ctx, ref ListDouble_2, 282);
            RepeatedFloat().Write(ref ctx, ref ListFloat_2, 290);
            RepeatedBool().Write(ref ctx, ref ListBoolean_2, 298);
            RepeatedEnum<SAMPLE_NUMBER>().Write(ref ctx, ref ListEnum_2, 306);
            RepeatedDateTime().Write(ref ctx, ref ListDateTime_2, 314);
            RepeatedTimeSpan().Write(ref ctx, ref ListTimeSpan_2, 322);
            RepeatedUri().Write(ref ctx, ref ListUri_2, 330);
            RepeatedGuid().Write(ref ctx, ref ListGuid_2, 338);
            _mapString_3_codec.WriteTo(ref ctx, ref MapString_3);
            _mapAlias_3_codec.WriteTo(ref ctx, ref MapAlias_3);
            if (SampleInfo_1 != null)
            {
                ctx.WriteRawTag(234, 2);
                ctx.WriteMessage(SampleInfo_1);
            }
            _mapInfo_3_codec.WriteTo(ref ctx, ref MapInfo_3);
            _mapEnum_3_codec.WriteTo(ref ctx, ref MapEnum_3);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (Alias_1.Length != 0)
            {
                size += 1 + ComputeStringSize(Alias_1);
            }
            if (Bytes_1.Length != 0)
            {
                size += 1 + ComputeBytesSize(Bytes_1);
            }
            if (Int32_1 != 0)
            {
                size += 1 + ComputeInt32Size(Int32_1);
            }
            if (Int64_1 != 0L)
            {
                size += 1 + ComputeInt64Size(Int64_1);
            }
            if (UInt32_1 != 0U)
            {
                size += 1 + ComputeUInt32Size(UInt32_1);
            }
            if (UInt64_1 != 0UL)
            {
                size += 1 + ComputeUInt64Size(UInt64_1);
            }
            if (SInt32_1 != 0)
            {
                size += 1 + ComputeSInt32Size(SInt32_1);
            }
            if (SInt64_1 != 0L)
            {
                size += 1 + ComputeSInt64Size(SInt64_1);
            }
            if (Fixed32_1 != 0U)
            {
                size += 1 + ComputeFixed32Size(Fixed32_1);
            }
            if (Fixed64_1 != 0UL)
            {
                size += 1 + ComputeFixed64Size(Fixed64_1);
            }
            if (SFixed32_1 != 0)
            {
                size += 1 + ComputeSFixed32Size(SFixed32_1);
            }
            if (SFixed64_1 != 0L)
            {
                size += 1 + ComputeSFixed64Size(SFixed64_1);
            }
            if (Double_1 != 0D)
            {
                size += 1 + ComputeDoubleSize(Double_1);
            }
            if (Float_1 != 0F)
            {
                size += 2 + ComputeFloatSize(Float_1);
            }
            if (Boolean_1 != false)
            {
                size += 2 + ComputeBoolSize(Boolean_1);
            }
            if (Enum_1 != default(SAMPLE_NUMBER))
            {
                size += 2 + ComputeEnumSize((int)Enum_1);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 2 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 2 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                size += 2 + ComputeStringSize(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                size += 2 + ComputeStringSize(Guid_1.ToString("D"));
            }
            size += RepeatedString().CalculateSize(ListTextAlias_2, 186);
            size += RepeatedBytes().CalculateSize(ListBytes_2, 194);
            size += RepeatedInt32().CalculateSize(ListInt32_2, 202);
            size += RepeatedInt64().CalculateSize(ListInt64_2, 210);
            size += RepeatedUInt32().CalculateSize(ListUInt32_2, 218);
            size += RepeatedUInt64().CalculateSize(ListUInt64_2, 226);
            size += RepeatedSInt32().CalculateSize(ListSInt32_2, 234);
            size += RepeatedSInt64().CalculateSize(ListSInt64_2, 242);
            size += RepeatedFixed32().CalculateSize(ListFixed32_2, 250);
            size += RepeatedFixed64().CalculateSize(ListFixed64_2, 258);
            size += RepeatedSFixed32().CalculateSize(ListSFixed32_2, 266);
            size += RepeatedSFixed64().CalculateSize(ListSFixed64_2, 274);
            size += RepeatedDouble().CalculateSize(ListDouble_2, 282);
            size += RepeatedFloat().CalculateSize(ListFloat_2, 290);
            size += RepeatedBool().CalculateSize(ListBoolean_2, 298);
            size += RepeatedEnum<SAMPLE_NUMBER>().CalculateSize(ListEnum_2, 306);
            size += RepeatedDateTime().CalculateSize(ListDateTime_2, 314);
            size += RepeatedTimeSpan().CalculateSize(ListTimeSpan_2, 322);
            size += RepeatedUri().CalculateSize(ListUri_2, 330);
            size += RepeatedGuid().CalculateSize(ListGuid_2, 338);
            size += _mapString_3_codec.CalculateSize(MapString_3);
            size += _mapAlias_3_codec.CalculateSize(MapAlias_3);
            if (SampleInfo_1 != null)
            {
                size += 2 + CodedOutputStream.ComputeMessageSize(SampleInfo_1);
            }
            size += _mapInfo_3_codec.CalculateSize(MapInfo_3);
            size += _mapEnum_3_codec.CalculateSize(MapEnum_3);
            return size;
        }

        public void MergeFrom(AllTypesData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.Alias_1.Length != 0)
            {
                Alias_1 = other.Alias_1;
            }
            if (other.Bytes_1.Length != 0)
            {
                Bytes_1 = other.Bytes_1;
            }
            if (other.Int32_1 != 0)
            {
                Int32_1 = other.Int32_1;
            }
            if (other.Int64_1 != 0L)
            {
                Int64_1 = other.Int64_1;
            }
            if (other.UInt32_1 != 0U)
            {
                UInt32_1 = other.UInt32_1;
            }
            if (other.UInt64_1 != 0UL)
            {
                UInt64_1 = other.UInt64_1;
            }
            if (other.SInt32_1 != 0)
            {
                SInt32_1 = other.SInt32_1;
            }
            if (other.SInt64_1 != 0L)
            {
                SInt64_1 = other.SInt64_1;
            }
            if (other.Fixed32_1 != 0U)
            {
                Fixed32_1 = other.Fixed32_1;
            }
            if (other.Fixed64_1 != 0UL)
            {
                Fixed64_1 = other.Fixed64_1;
            }
            if (other.SFixed32_1 != 0)
            {
                SFixed32_1 = other.SFixed32_1;
            }
            if (other.SFixed64_1 != 0L)
            {
                SFixed64_1 = other.SFixed64_1;
            }
            if (other.Double_1 != 0D)
            {
                Double_1 = other.Double_1;
            }
            if (other.Float_1 != 0F)
            {
                Float_1 = other.Float_1;
            }
            if (other.Boolean_1 != false)
            {
                Boolean_1 = other.Boolean_1;
            }
            if (other.Enum_1 != default(SAMPLE_NUMBER))
            {
                Enum_1 = other.Enum_1;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            ListTextAlias_2.AddRange(other.ListTextAlias_2);
            ListBytes_2.AddRange(other.ListBytes_2);
            ListInt32_2.AddRange(other.ListInt32_2);
            ListInt64_2.AddRange(other.ListInt64_2);
            ListUInt32_2.AddRange(other.ListUInt32_2);
            ListUInt64_2.AddRange(other.ListUInt64_2);
            ListSInt32_2.AddRange(other.ListSInt32_2);
            ListSInt64_2.AddRange(other.ListSInt64_2);
            ListFixed32_2.AddRange(other.ListFixed32_2);
            ListFixed64_2.AddRange(other.ListFixed64_2);
            ListSFixed32_2.AddRange(other.ListSFixed32_2);
            ListSFixed64_2.AddRange(other.ListSFixed64_2);
            ListDouble_2.AddRange(other.ListDouble_2);
            ListFloat_2.AddRange(other.ListFloat_2);
            ListBoolean_2.AddRange(other.ListBoolean_2);
            ListEnum_2.AddRange(other.ListEnum_2);
            ListDateTime_2.AddRange(other.ListDateTime_2);
            ListTimeSpan_2.AddRange(other.ListTimeSpan_2);
            ListUri_2.AddRange(other.ListUri_2);
            ListGuid_2.AddRange(other.ListGuid_2);
            _mapString_3_codec.Merge(MapString_3, other.MapString_3);
            _mapAlias_3_codec.Merge(MapAlias_3, other.MapAlias_3);
            if (other.SampleInfo_1 != null)
            {
                if (SampleInfo_1 == null)
                    SampleInfo_1 = new SampleInfo();
                SampleInfo_1.MergeFrom(other.SampleInfo_1);
            }
            _mapInfo_3_codec.Merge(MapInfo_3, other.MapInfo_3);
            _mapEnum_3_codec.Merge(MapEnum_3, other.MapEnum_3);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 26:
                        Alias_1 = ctx.ReadString();
                        break;
                    case 34:
                        Bytes_1 = ctx.ReadBytes();
                        break;
                    case 40:
                        Int32_1 = ctx.ReadInt32();
                        break;
                    case 48:
                        Int64_1 = ctx.ReadInt64();
                        break;
                    case 56:
                        UInt32_1 = ctx.ReadUInt32();
                        break;
                    case 64:
                        UInt64_1 = ctx.ReadUInt64();
                        break;
                    case 72:
                        SInt32_1 = ctx.ReadSInt32();
                        break;
                    case 80:
                        SInt64_1 = ctx.ReadSInt64();
                        break;
                    case 93:
                        Fixed32_1 = ctx.ReadFixed32();
                        break;
                    case 97:
                        Fixed64_1 = ctx.ReadFixed64();
                        break;
                    case 109:
                        SFixed32_1 = ctx.ReadSFixed32();
                        break;
                    case 113:
                        SFixed64_1 = ctx.ReadSFixed64();
                        break;
                    case 121:
                        Double_1 = ctx.ReadDouble();
                        break;
                    case 133:
                        Float_1 = ctx.ReadFloat();
                        break;
                    case 136:
                        Boolean_1 = ctx.ReadBool();
                        break;
                    case 144:
                        Enum_1 = (SAMPLE_NUMBER)ctx.ReadEnum();
                        break;
                    case 152:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 160:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 170:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                    case 178:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 186:
                        RepeatedString().Read(ref ctx, ref ListTextAlias_2, 186);
                        break;
                    case 194:
                        RepeatedBytes().Read(ref ctx, ref ListBytes_2, 194);
                        break;
                    case 202:
                    case 200:
                        RepeatedInt32().Read(ref ctx, ref ListInt32_2, 202);
                        break;
                    case 210:
                    case 208:
                        RepeatedInt64().Read(ref ctx, ref ListInt64_2, 210);
                        break;
                    case 218:
                    case 216:
                        RepeatedUInt32().Read(ref ctx, ref ListUInt32_2, 218);
                        break;
                    case 226:
                    case 224:
                        RepeatedUInt64().Read(ref ctx, ref ListUInt64_2, 226);
                        break;
                    case 234:
                    case 232:
                        RepeatedSInt32().Read(ref ctx, ref ListSInt32_2, 234);
                        break;
                    case 242:
                    case 240:
                        RepeatedSInt64().Read(ref ctx, ref ListSInt64_2, 242);
                        break;
                    case 250:
                    case 253:
                        RepeatedFixed32().Read(ref ctx, ref ListFixed32_2, 250);
                        break;
                    case 258:
                    case 257:
                        RepeatedFixed64().Read(ref ctx, ref ListFixed64_2, 258);
                        break;
                    case 266:
                    case 269:
                        RepeatedSFixed32().Read(ref ctx, ref ListSFixed32_2, 266);
                        break;
                    case 274:
                    case 273:
                        RepeatedSFixed64().Read(ref ctx, ref ListSFixed64_2, 274);
                        break;
                    case 282:
                    case 281:
                        RepeatedDouble().Read(ref ctx, ref ListDouble_2, 282);
                        break;
                    case 290:
                    case 293:
                        RepeatedFloat().Read(ref ctx, ref ListFloat_2, 290);
                        break;
                    case 298:
                    case 296:
                        RepeatedBool().Read(ref ctx, ref ListBoolean_2, 298);
                        break;
                    case 306:
                    case 304:
                        RepeatedEnum<SAMPLE_NUMBER>().Read(ref ctx, ref ListEnum_2, 306);
                        break;
                    case 314:
                    case 312:
                        RepeatedDateTime().Read(ref ctx, ref ListDateTime_2, 314);
                        break;
                    case 322:
                    case 320:
                        RepeatedTimeSpan().Read(ref ctx, ref ListTimeSpan_2, 322);
                        break;
                    case 330:
                        RepeatedUri().Read(ref ctx, ref ListUri_2, 330);
                        break;
                    case 338:
                        RepeatedGuid().Read(ref ctx, ref ListGuid_2, 338);
                        break;
                    case 346:
                        _mapString_3_codec.Read(ref ctx, ref MapString_3);
                        break;
                    case 354:
                        _mapAlias_3_codec.Read(ref ctx, ref MapAlias_3);
                        break;
                    case 362:
                        if (SampleInfo_1 == null)
                            SampleInfo_1 = new SampleInfo();
                        ctx.ReadMessage(SampleInfo_1);
                        break;
                    case 378:
                        _mapInfo_3_codec.Read(ref ctx, ref MapInfo_3);
                        break;
                    case 386:
                        _mapEnum_3_codec.Read(ref ctx, ref MapEnum_3);
                        break;
                }
            }
        }
        #endregion
    }

    public partial class AllTypesDataTable : IMessage<AllTypesDataTable>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for AllTypesDataTable
        // Map: Tag(10) = 1 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2

        public Dictionary<int, AllTypesData> Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, AllTypesData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<AllTypesData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public AllTypesDataTable()
        {
        }

        public AllTypesDataTable(AllTypesDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
        }

        public AllTypesDataTable Clone()
        {
            return new AllTypesDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as AllTypesDataTable);
        }

        public bool Equals(AllTypesDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            return size;
        }

        public void MergeFrom(AllTypesDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                }
            }
        }
        #endregion
    }

    public partial class CustomFieldData : IMessage<CustomFieldData>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for CustomFieldData
        // Id: Tag(13) = 1 << 3 | 5
        // IdAlias: Tag(18) = 2 << 3 | 2
        // DateTime_1: Tag(24) = 3 << 3 | 0
        // TimeSpan_1: Tag(32) = 4 << 3 | 0
        // Guid_1: Tag(42) = 5 << 3 | 2
        // Uri_1: Tag(50) = 6 << 3 | 2

        public int Id;
        public string IdAlias = "";
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Guid Guid_1 = Guid.Empty;
        public Uri Uri_1;
        #endregion

        #region xpTURN.Protobuf.Method
        public CustomFieldData()
        {
        }

        public CustomFieldData(CustomFieldData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Guid_1 = other.Guid_1;
            Uri_1 = other.Uri_1;
        }

        public CustomFieldData Clone()
        {
            return new CustomFieldData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as CustomFieldData);
        }

        public bool Equals(CustomFieldData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(24);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(32);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(42);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(50);
                ctx.WriteString(Uri_1.ToString());
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 1 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 1 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Guid_1 != default(Guid))
            {
                size += 1 + ComputeStringSize(Guid_1.ToString("D"));
            }
            if (Uri_1 != default(Uri))
            {
                size += 1 + ComputeStringSize(Uri_1.ToString());
            }
            return size;
        }

        public void MergeFrom(CustomFieldData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 24:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 32:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 42:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 50:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                }
            }
        }
        #endregion
    }

    public partial class CustomFieldDataTable : IMessage<CustomFieldDataTable>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for CustomFieldDataTable
        // Map: Tag(10) = 1 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2

        public Dictionary<int, CustomFieldData> Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, CustomFieldData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<CustomFieldData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public CustomFieldDataTable()
        {
        }

        public CustomFieldDataTable(CustomFieldDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
        }

        public CustomFieldDataTable Clone()
        {
            return new CustomFieldDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as CustomFieldDataTable);
        }

        public bool Equals(CustomFieldDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            return size;
        }

        public void MergeFrom(CustomFieldDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                }
            }
        }
        #endregion
    }

    public partial class EmptyData : IMessage<EmptyData>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for EmptyData
        // Id: Tag(13) = 1 << 3 | 5
        // IdAlias: Tag(18) = 2 << 3 | 2
        // MapInfo_3: Tag(378) = 47 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2

        public int Id;
        public string IdAlias = "";
        public Dictionary<int, SampleInfo> MapInfo_3 = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, SampleInfo> _mapInfo_3_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<SampleInfo>.MessageCodec, 378, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public EmptyData()
        {
        }

        public EmptyData(EmptyData other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
            MapInfo_3 = _mapInfo_3_codec.Clone(other.MapInfo_3);
        }

        public EmptyData Clone()
        {
            return new EmptyData(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as EmptyData);
        }

        public bool Equals(EmptyData other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            if (!_mapInfo_3_codec.AreEqual(MapInfo_3, other.MapInfo_3)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            hash ^= _mapInfo_3_codec.GetHashCode(MapInfo_3);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
            _mapInfo_3_codec.WriteTo(ref ctx, ref MapInfo_3);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            size += _mapInfo_3_codec.CalculateSize(MapInfo_3);
            return size;
        }

        public void MergeFrom(EmptyData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
            _mapInfo_3_codec.Merge(MapInfo_3, other.MapInfo_3);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                    case 378:
                        _mapInfo_3_codec.Read(ref ctx, ref MapInfo_3);
                        break;
                }
            }
        }
        #endregion
    }

    public partial class EmptyDataTable : IMessage<EmptyDataTable>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for EmptyDataTable
        // Map: Tag(10) = 1 << 3 | 2
        //     keyTag(13) = 1 << 3 | 5
        //     valueTag(18) = 2 << 3 | 2

        public Dictionary<int, EmptyData> Map = new ();
        #endregion

        #region Paser.Field
        protected static readonly xpMapCodec<int, EmptyData> _map_codec
            = new (xpFieldHelper.SFixed32Codec, xpFieldCodecForMessage<EmptyData>.MessageCodec, 10, 13, 18);
        #endregion

        #region xpTURN.Protobuf.Method
        public EmptyDataTable()
        {
        }

        public EmptyDataTable(EmptyDataTable other) : this()
        {
            Map = _map_codec.Clone(other.Map);
        }

        public EmptyDataTable Clone()
        {
            return new EmptyDataTable(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as EmptyDataTable);
        }

        public bool Equals(EmptyDataTable other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (!_map_codec.AreEqual(Map, other.Map)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= _map_codec.GetHashCode(Map);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            _map_codec.WriteTo(ref ctx, ref Map);
        }

        public int CalculateSize()
        {
            int size = 0;
            size += _map_codec.CalculateSize(Map);
            return size;
        }

        public void MergeFrom(EmptyDataTable other)
        {
            if (other == null)
            {
                return;
            }
            _map_codec.Merge(Map, other.Map);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 10:
                        _map_codec.Read(ref ctx, ref Map);
                        break;
                }
            }
        }
        #endregion
    }

    public partial class EmptyInfo : IMessage<EmptyInfo>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for EmptyInfo
        // Id: Tag(13) = 1 << 3 | 5
        // IdAlias: Tag(18) = 2 << 3 | 2

        public int Id;
        public string IdAlias = "";
        #endregion

        #region xpTURN.Protobuf.Method
        public EmptyInfo()
        {
        }

        public EmptyInfo(EmptyInfo other) : this()
        {
            Id = other.Id;
            IdAlias = other.IdAlias;
        }

        public EmptyInfo Clone()
        {
            return new EmptyInfo(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as EmptyInfo);
        }

        public bool Equals(EmptyInfo other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (Id != other.Id) return false;
            if (IdAlias != other.IdAlias) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (IdAlias.Length != 0) hash ^= IdAlias.GetHashCode();
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (Id != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(Id);
            }
            if (IdAlias.Length != 0)
            {
                ctx.WriteRawTag(18);
                ctx.WriteString(IdAlias);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + ComputeSFixed32Size(Id);
            }
            if (IdAlias.Length != 0)
            {
                size += 1 + ComputeStringSize(IdAlias);
            }
            return size;
        }

        public void MergeFrom(EmptyInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.IdAlias.Length != 0)
            {
                IdAlias = other.IdAlias;
            }
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        Id = ctx.ReadSFixed32();
                        break;
                    case 18:
                        IdAlias = ctx.ReadString();
                        break;
                }
            }
        }
        #endregion
    }

    public partial class SampleInfo : IMessage<SampleInfo>, IBufferMessage
    {
        #region Proto.Field
        // Field definitions for SampleInfo
        // InfoId: Tag(13) = 1 << 3 | 5
        // DateTime_1: Tag(24) = 3 << 3 | 0
        // TimeSpan_1: Tag(32) = 4 << 3 | 0
        // Uri_1: Tag(42) = 5 << 3 | 2
        // Guid_1: Tag(50) = 6 << 3 | 2
        // DateTime_2: Tag(58) = 7 << 3 | 2
        // TimeSpan_2: Tag(66) = 8 << 3 | 2
        // Uri_2: Tag(74) = 9 << 3 | 2
        // Guid_2: Tag(82) = 10 << 3 | 2

        public int InfoId;
        public DateTime DateTime_1;
        public TimeSpan TimeSpan_1;
        public Uri Uri_1;
        public Guid Guid_1 = Guid.Empty;
        public List<DateTime> DateTime_2 = new ();
        public List<TimeSpan> TimeSpan_2 = new ();
        public List<Uri> Uri_2 = new ();
        public List<Guid> Guid_2 = new ();
        #endregion

        #region xpTURN.Protobuf.Method
        public SampleInfo()
        {
        }

        public SampleInfo(SampleInfo other) : this()
        {
            InfoId = other.InfoId;
            DateTime_1 = other.DateTime_1;
            TimeSpan_1 = other.TimeSpan_1;
            Uri_1 = other.Uri_1;
            Guid_1 = other.Guid_1;
            DateTime_2 = RepeatedDateTime().Clone(other.DateTime_2);
            TimeSpan_2 = RepeatedTimeSpan().Clone(other.TimeSpan_2);
            Uri_2 = RepeatedUri().Clone(other.Uri_2);
            Guid_2 = RepeatedGuid().Clone(other.Guid_2);
        }

        public SampleInfo Clone()
        {
            return new SampleInfo(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as SampleInfo);
        }

        public bool Equals(SampleInfo other)
        {
            if (ReferenceEquals(other, null)) return false;
            if (ReferenceEquals(other, this)) return true;

            if (InfoId != other.InfoId) return false;
            if (DateTime_1 != other.DateTime_1) return false;
            if (TimeSpan_1 != other.TimeSpan_1) return false;
            if (Uri_1 != other.Uri_1) return false;
            if (Guid_1 != other.Guid_1) return false;
            if (!RepeatedDateTime().AreEqual(DateTime_2, other.DateTime_2)) return false;
            if (!RepeatedTimeSpan().AreEqual(TimeSpan_2, other.TimeSpan_2)) return false;
            if (!RepeatedUri().AreEqual(Uri_2, other.Uri_2)) return false;
            if (!RepeatedGuid().AreEqual(Guid_2, other.Guid_2)) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (InfoId != 0) hash ^= InfoId.GetHashCode();
            if (DateTime_1 != default(DateTime)) hash ^= DateTime_1.GetHashCode();
            if (TimeSpan_1 != default(TimeSpan)) hash ^= TimeSpan_1.GetHashCode();
            if (Uri_1 != default(Uri)) hash ^= Uri_1.GetHashCode();
            if (Guid_1 != default(Guid)) hash ^= Guid_1.GetHashCode();
            hash ^= RepeatedDateTime().GetHashCode(DateTime_2);
            hash ^= RepeatedTimeSpan().GetHashCode(TimeSpan_2);
            hash ^= RepeatedUri().GetHashCode(Uri_2);
            hash ^= RepeatedGuid().GetHashCode(Guid_2);
            return hash;
        }

        public void WriteTo(CodedOutputStream output)
        {
            output.WriteRawMessage(this);
        }

        void IBufferMessage.InternalWriteTo(ref WriteContext ctx)
        {
            if (InfoId != 0)
            {
                ctx.WriteRawTag(13);
                ctx.WriteSFixed32(InfoId);
            }
            if (DateTime_1 != default(DateTime))
            {
                ctx.WriteRawTag(24);
                ctx.WriteUInt64(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                ctx.WriteRawTag(32);
                ctx.WriteInt64(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                ctx.WriteRawTag(42);
                ctx.WriteString(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                ctx.WriteRawTag(50);
                ctx.WriteString(Guid_1.ToString("D"));
            }
            RepeatedDateTime().Write(ref ctx, ref DateTime_2, 58);
            RepeatedTimeSpan().Write(ref ctx, ref TimeSpan_2, 66);
            RepeatedUri().Write(ref ctx, ref Uri_2, 74);
            RepeatedGuid().Write(ref ctx, ref Guid_2, 82);
        }

        public int CalculateSize()
        {
            int size = 0;
            if (InfoId != 0)
            {
                size += 1 + ComputeSFixed32Size(InfoId);
            }
            if (DateTime_1 != default(DateTime))
            {
                size += 1 + ComputeUInt64Size(DateTime_1.GetDateData());
            }
            if (TimeSpan_1 != default(TimeSpan))
            {
                size += 1 + ComputeInt64Size(TimeSpan_1.Ticks);
            }
            if (Uri_1 != default(Uri))
            {
                size += 1 + ComputeStringSize(Uri_1.ToString());
            }
            if (Guid_1 != default(Guid))
            {
                size += 1 + ComputeStringSize(Guid_1.ToString("D"));
            }
            size += RepeatedDateTime().CalculateSize(DateTime_2, 58);
            size += RepeatedTimeSpan().CalculateSize(TimeSpan_2, 66);
            size += RepeatedUri().CalculateSize(Uri_2, 74);
            size += RepeatedGuid().CalculateSize(Guid_2, 82);
            return size;
        }

        public void MergeFrom(SampleInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.InfoId != 0)
            {
                InfoId = other.InfoId;
            }
            if (other.DateTime_1 != default(DateTime))
            {
                DateTime_1 = other.DateTime_1;
            }
            if (other.TimeSpan_1 != default(TimeSpan))
            {
                TimeSpan_1 = other.TimeSpan_1;
            }
            if (other.Uri_1 != default(Uri))
            {
                Uri_1 = other.Uri_1;
            }
            if (other.Guid_1 != default(Guid))
            {
                Guid_1 = other.Guid_1;
            }
            DateTime_2.AddRange(other.DateTime_2);
            TimeSpan_2.AddRange(other.TimeSpan_2);
            Uri_2.AddRange(other.Uri_2);
            Guid_2.AddRange(other.Guid_2);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext ctx)
        {
            uint tag;
            while ((tag = ctx.ReadTag()) != 0)
            {
                if ((tag & 7) == 4)
                {
                    // Abort on any end group tag.
                    return;
                }
                switch (tag)
                {
                    default:
                        xpParseUtils.SkipLastField(ref ctx);
                        break;
                    case 13:
                        InfoId = ctx.ReadSFixed32();
                        break;
                    case 24:
                        DateTime_1 = ToDateTime(ctx.ReadUInt64());
                        break;
                    case 32:
                        TimeSpan_1 = TimeSpan.FromTicks(ctx.ReadInt64());
                        break;
                    case 42:
                        Uri_1 = new Uri(ctx.ReadString());
                        break;
                    case 50:
                        Guid_1 = Guid.Parse(ctx.ReadString());
                        break;
                    case 58:
                    case 56:
                        RepeatedDateTime().Read(ref ctx, ref DateTime_2, 58);
                        break;
                    case 66:
                    case 64:
                        RepeatedTimeSpan().Read(ref ctx, ref TimeSpan_2, 66);
                        break;
                    case 74:
                        RepeatedUri().Read(ref ctx, ref Uri_2, 74);
                        break;
                    case 82:
                        RepeatedGuid().Read(ref ctx, ref Guid_2, 82);
                        break;
                }
            }
        }
        #endregion
    }

    public enum SAMPLE_NUMBER
    {
        N01_000 = 0,
        N01_001 = 1,
        N01_002 = 2,
        N01_003 = 3,
        N01_004 = 4,
        N01_005 = 5,
        N01_006 = 6,
        N01_007 = 7,
        N01_008 = 8,
        N01_009 = 9,
        N01_010 = 10,
        N02_001 = 11,
        N02_002 = 12,
        N02_003 = 13,
        N02_004 = 14,
        N02_005 = 15,
        N02_006 = 16,
        N02_007 = 17,
        N02_008 = 18,
        N02_009 = 19,
        N02_010 = 20,
    }

}
#nullable restore
#endregion

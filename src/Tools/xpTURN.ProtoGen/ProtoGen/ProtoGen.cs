using System;
using System.IO;
using System.Collections.Generic;

using Google.Protobuf.Reflection;
using ProtoBuf.Reflection;

using xpTURN.Common;
using xpTURN.TableGen;

namespace xpTURN.ProtoGen
{
    public static class ProtoGen
    {
        static FileDescriptorSet _descSet;
        static CodeGenerator _codegen;

        static ProtoGen()
        {
            xpTURN.MegaData.JsonWrapper.FromJsonMethod = xpTURN.Tool.Common.JsonUtils.FromJson;
            xpTURN.MegaData.JsonWrapper.ToJsonMethod = xpTURN.Tool.Common.JsonUtils.ToJson;
        }

        private static void WriteFiles(IEnumerable<CodeFile> files, Dictionary<string, string> options)
        {
            foreach (var file in files)
            {
                var fileName = file.Name;
                var name = Path.GetFileNameWithoutExtension(fileName);
                var ext = Path.GetExtension(fileName).ToLowerInvariant();

                if (name.Contains(".AutoGenerated"))
                {
                    // Remove AutoGenerated from the name
                    name = name.Replace(".AutoGenerated", string.Empty);
                }
                
                fileName = $"{name}.AutoGenerated{ext}";
                var path = Path.Combine(options.GetCustomOption("Output"), fileName);

                var dir = Path.GetDirectoryName(path);
                if (!Directory.Exists(dir))
                {
                    Logger.Log.Error($"Output directory does not exist, creating... {dir}");
                    Directory.CreateDirectory(dir);
                }

                File.WriteAllText(path, file.Text);
                Logger.Log.Info("");
                Logger.Log.Info($"generated: {path}");
            }
        }

        public static void Clear()
        {
            Logger.Log.Tool.Clear();

            // Initialize the DescriptorSet
            _descSet = new FileDescriptorSet();

            // Initialize the CodeGenerator
            _codegen = ProtobufCSharpCodeGenerator.DefaultGen;
        }

        public static bool DoGenerate(List<string> inputFiles, List<string> importPaths, Dictionary<string, string> options)
        {
            Clear();
            _descSet.DefaultPackage = options.GetCustomOption("Namespace");

            // Add import paths to the DescriptorSet
            foreach (var path in importPaths)
            {
                if (!string.IsNullOrEmpty(path) && Directory.Exists(path))
                {
                    _descSet.AddImportPath(path);
                }
            }

            // Add input files to the DescriptorSet
            foreach (var file in inputFiles)
            {
                if (!string.IsNullOrEmpty(file) && File.Exists(file))
                {
                    if (!_descSet.Add(file, true))
                    {
                        Logger.Log.Tool.Error(DebugInfo.Empty, $"Failed to add file: {file}");
                    }
                }
            }

            if(Logger.Log.Tool.Count() > 0)
            {
                Logger.Log.Error("There are errors in the input files. Please check the logs.");
                return false;
            }

            // Process the DescriptorSet
            _descSet.Process();

            // Check for errors in the DescriptorSet
            var errors = _descSet.GetErrors();
            foreach (var err in errors)
            {
                if (err.IsError)
                    Logger.Log.Tool.Error(DebugInfo.Empty, err.ToString());
                else
                    Logger.Log.Tool.Warn(DebugInfo.Empty, err.ToString());
            }

            if (Logger.Log.Tool.Count() > 0)
            {
                Logger.Log.Error("There are errors in the input files. Please check the logs.");
                return false;
            }

            // Code generate
            var files = _codegen.Generate(_descSet, normalizer:NameNormalizer.Null, options: options);
            WriteFiles(files, options);

            return true;
        }
    }
}

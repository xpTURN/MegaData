using System;
using System.IO;
using System.Collections.Generic;

using xpTURN.Common;
using xpTURN.Tool.Common;
using static xpTURN.TableGen.Utils.ProtoTypeUtils;

namespace xpTURN.TableGen
{
    public class ProtoCodeGenerator : ICodeGenerator
    {
        string GetRepeatedString(FieldDesc fieldDef) => fieldDef.Collections == FieldCollections.List ? "repeated " : string.Empty;
        string GetPackedString(FieldDesc fieldDef) => fieldDef.IsPackedRepeatedField ? " [packed = true]" : string.Empty;
        string GetDeprecatedString(FieldDesc fieldDef) => fieldDef.Obsolete != FieldObsolete.None ? " [deprecated = true]" : string.Empty;

        public void WriteFileHeader(GeneratorContext ctx)
        {
            var spaceName = ctx.GetCustomOption("Namespace");

            ctx.WriteLine($"// This file was generated by a tool; you should avoid making direct changes.");
            ctx.WriteLine($"syntax = \"proto3\";");
            ctx.WriteLine($"package {spaceName};");
        }

        public void WriteFileFooter(GeneratorContext ctx)
        {
        }

        public void WriteEnumHeader(GeneratorContext ctx, TableDesc tableDef)
        {
            ctx.WriteLine($"");
            ctx.WriteLine($"enum {tableDef.Name}");
            ctx.WriteLine($"{{").Indent();
        }

        public void WriteEnumValue(GeneratorContext ctx, FieldDesc fieldDef)
        {
            var deprecated = GetDeprecatedString(fieldDef);
            ctx.WriteLine($"{fieldDef.Name} = {fieldDef.Num}{deprecated};");
        }

        public void WriteEnumFooter(GeneratorContext ctx, TableDesc tableDef)
        {
            ctx.Outdent().WriteLine($"}}");
        }

        public void WriteEnum(GeneratorContext ctx, TableDesc tableDef)
        {
            WriteEnumHeader(ctx, tableDef);

            foreach (var field in tableDef.GetListField())
            {
                WriteEnumValue(ctx, field);
            }

            WriteEnumFooter(ctx, tableDef);
        }

        public void WriteMessageHeader(GeneratorContext ctx, TableDesc tableDef)
        {
            ctx.WriteLine($"");
            ctx.WriteLine($"message {tableDef.Name}");
            ctx.WriteLine($"{{").Indent();
        }

        public void WriteProtobufFunction(GeneratorContext ctx, TableDesc tableDef)
        {
        }

        public void WriteField(GeneratorContext ctx, TableDesc tableDef, FieldDesc fieldDef)
        {
            var repeated = GetRepeatedString(fieldDef);
            var packed = GetPackedString(fieldDef);
            var deprecated = GetDeprecatedString(fieldDef);

            string keyTypeName = GetProtoTypeName(fieldDef.FKeyType, fieldDef.FKeyTypeName);
            string valueTypeName = GetProtoTypeName(fieldDef.FValueType, fieldDef.FValueTypeName);

            if (fieldDef.Collections == FieldCollections.Map)
                ctx.WriteLine($"map<{keyTypeName}, {valueTypeName}> {fieldDef.Name} = {fieldDef.Num}{packed}{deprecated};");
            else
                ctx.WriteLine($"{repeated}{valueTypeName} {fieldDef.Name} = {fieldDef.Num}{packed}{deprecated};");
        }

        public void WriteMessageFooter(GeneratorContext ctx, TableDesc tableDef)
        {
            ctx.Outdent().WriteLine($"}}");
        }

        private bool IsIgnoreField(TableDesc tableDef, FieldDesc fieldDef)
        {
            return fieldDef.NonProtoField;
        }

        public void WriteMessage(GeneratorContext ctx, TableDesc tableDef)
        {
            WriteMessageHeader(ctx, tableDef);

            foreach (var field in tableDef.GetListField())
            {
                if (IsIgnoreField(tableDef, field))
                    continue;
                
                WriteField(ctx, tableDef, field);
            }

            WriteMessageFooter(ctx, tableDef);
        }

        private void WriteBuffer(GeneratorContext ctx, List<TableDesc> listTable)
        {
            //
            WriteFileHeader(ctx);

            //
            var listMsg = listTable.FindAll(item => item.IsMessage);
            foreach (var table in listMsg)
            {
                //
                Logger.Log.Info($"{table.Type.ToString().PadRight(12)}'{table.Name}'");
                WriteMessage(ctx, table);
            }

            //
            var listEnum = listTable.FindAll(item => item.IsEnum);
            foreach (var table in listEnum)
            {
                //
                Logger.Log.Info($"{table.Type.ToString().PadRight(12)}'{table.Name}'");
                WriteEnum(ctx, table);
            }

            //
            WriteFileFooter(ctx);
        }

        public string ExportFile(GeneratorContext ctx, string outputFile, List<TableDesc> list)
        {
            //
            string generated = string.Empty;
            {
                WriteBuffer(ctx, list);
                generated = ctx.Output.ToString();
            }

            //
            using (var writer = File.CreateText(outputFile))
            {
                writer.Write(generated);
            }

            return MD5Utils.ComputeMD5Hash(generated);
        }
    }
}
